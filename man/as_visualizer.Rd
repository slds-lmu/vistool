% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/as_visualizer.R
\name{as_visualizer}
\alias{as_visualizer}
\alias{as_visualizer.Task}
\alias{as_visualizer.Objective}
\alias{as_visualizer.LossFunction}
\title{Convert to visualizer}
\usage{
as_visualizer(x, ...)

\method{as_visualizer}{Task}(
  x,
  learner,
  type = "auto",
  x1_limits = NULL,
  x2_limits = NULL,
  padding = 0,
  n_points = 100L,
  ...
)

\method{as_visualizer}{Objective}(
  x,
  type = "auto",
  x1_limits = NULL,
  x2_limits = NULL,
  padding = 0,
  n_points = 100L,
  ...
)

\method{as_visualizer}{LossFunction}(x, y_pred, y_true, ...)
}
\arguments{
\item{x}{(`any`)\cr
Object to convert to a visualizer.}

\item{...}{(`any`)\cr
Additional arguments.}

\item{learner}{(`mlr3::Learner`)\cr
The learner to train the model with.}

\item{type}{(`character(1)`)\cr
The type of visualization: "auto" (default), "1d", "2d", or "3d". 
If "auto", automatically chooses based on the number of dimensions.}

\item{x1_limits}{(`numeric(2)`)\cr
The x1 limits.}

\item{x2_limits}{(`numeric(2)`)\cr
The x2 limits.}

\item{padding}{(`numeric(1)`)\cr
A margin that is added to x1limits and x2limits.
The x1 margin is calculated by `max(x1lmits) - min(x1limits) * padding`.}

\item{n_points}{(`integer(1)`)\cr
The number of generated point per dimension.
Note that a grid of `npoints^2` values is generated and evaluated by `objective$eval(x)` to plot the surface.}

\item{y_pred}{(`numeric()`)\cr
Predicted values.}

\item{y_true}{(`numeric(1)`)\cr
True value.}
}
\description{
This function converts to a visualizer. Automatically chooses between 1D, 2D, and 3D 
visualizations based on the number of features/dimensions, or allows explicit control
via the `type` parameter.
}
