% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Visualizer.R
\name{Visualizer}
\alias{Visualizer}
\title{Base Visualizer Class}
\description{
Base class for all visualizers. Provides a common interface for creating
and saving plots across different plotting backends (ggplot2 for 1D/2D, plotly for 3D).
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Visualizer-set_theme}{\code{Visualizer$set_theme()}}
\item \href{#method-Visualizer-theme}{\code{Visualizer$theme()}}
\item \href{#method-Visualizer-plot}{\code{Visualizer$plot()}}
\item \href{#method-Visualizer-resolve_layer_colors}{\code{Visualizer$resolve_layer_colors()}}
\item \href{#method-Visualizer-save}{\code{Visualizer$save()}}
\item \href{#method-Visualizer-add_points}{\code{Visualizer$add_points()}}
\item \href{#method-Visualizer-clone}{\code{Visualizer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visualizer-set_theme"></a>}}
\if{latex}{\out{\hypertarget{method-Visualizer-set_theme}{}}}
\subsection{Method \code{set_theme()}}{
Set the instance theme (partial override stored separately)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$set_theme(theme)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{theme}}{(`list`) Partial theme created with vistool_theme() or a named list}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visualizer-theme"></a>}}
\if{latex}{\out{\hypertarget{method-Visualizer-theme}{}}}
\subsection{Method \code{theme()}}{
Get the instance theme (merged with current package default)
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$theme()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visualizer-plot"></a>}}
\if{latex}{\out{\hypertarget{method-Visualizer-plot}{}}}
\subsection{Method \code{plot()}}{
Base plot method that sets up common plot settings and resolves layer colors.
This method should be called by all child classes via `super$plot(...)`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$plot(
  theme = NULL,
  plot_title = NULL,
  plot_subtitle = NULL,
  x_lab = NULL,
  y_lab = NULL,
  z_lab = NULL,
  x_limits = NULL,
  y_limits = NULL,
  z_limits = NULL,
  show_legend = TRUE,
  legend_title = NULL,
  show_title = TRUE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{theme}}{(`list`)\cr
Partial theme override for this render; see vistool_theme().}

\item{\code{plot_title}}{(`character(1)`)\cr
Main plot title. If NULL, uses the visualizer's default title. Default is NULL.}

\item{\code{plot_subtitle}}{(`character(1)`)\cr
Plot subtitle. If NULL, no subtitle is shown. Default is NULL.}

\item{\code{x_lab}}{(`character(1)`)\cr
X-axis label. If NULL, uses the visualizer's default label. Default is NULL.}

\item{\code{y_lab}}{(`character(1)`)\cr
Y-axis label. If NULL, uses the visualizer's default label. Default is NULL.}

\item{\code{z_lab}}{(`character(1)`)\cr
Z-axis label (for surface plots). If NULL, uses the visualizer's default label. Default is NULL.}

\item{\code{x_limits}}{(`numeric(2)`)\cr
X-axis limits as c(min, max). If NULL, uses automatic limits. Default is NULL.}

\item{\code{y_limits}}{(`numeric(2)`)\cr
Y-axis limits as c(min, max). If NULL, uses automatic limits. Default is NULL.}

\item{\code{z_limits}}{(`numeric(2)`)\cr
Z-axis limits as c(min, max) (for surface plots). If NULL, uses automatic limits. Default is NULL.}

\item{\code{show_legend}}{(`logical(1)`)\cr
Whether to show the legend. Default is TRUE.}

\item{\code{legend_title}}{(`character(1)`)\cr
Title for the legend. If NULL, uses default based on visualizer type. Default is NULL.}

\item{\code{show_title}}{(`logical(1)`)\cr
Indicator whether to show the title of the plot.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible self for method chaining (child classes handle actual plot creation).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visualizer-resolve_layer_colors"></a>}}
\if{latex}{\out{\hypertarget{method-Visualizer-resolve_layer_colors}{}}}
\subsection{Method \code{resolve_layer_colors()}}{
Resolve automatic color assignments in stored layers.
This method should be called by child classes after rendering layers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$resolve_layer_colors()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visualizer-save"></a>}}
\if{latex}{\out{\hypertarget{method-Visualizer-save}{}}}
\subsection{Method \code{save()}}{
Save the plot to a file. The format is determined by the file extension.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$save(filename, width = NULL, height = NULL, dpi = 300, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filename}}{(`character(1)`)\cr
The filename to save the plot to. The file extension determines the format.}

\item{\code{width}}{(`numeric(1)`)\cr
Width of the plot in pixels (for plotly) or inches (for ggplot2).}

\item{\code{height}}{(`numeric(1)`)\cr
Height of the plot in pixels (for plotly) or inches (for ggplot2).}

\item{\code{dpi}}{(`numeric(1)`)\cr
Resolution for ggplot2 plots (ignored for plotly plots).}

\item{\code{...}}{Additional arguments passed to the underlying save function.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visualizer-add_points"></a>}}
\if{latex}{\out{\hypertarget{method-Visualizer-add_points}{}}}
\subsection{Method \code{add_points()}}{
Add points to the plot. This method can be called multiple times to add different sets of points.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$add_points(
  points,
  color = "auto",
  size = NULL,
  shape = 19,
  alpha = NULL,
  annotations = NULL,
  annotation_size = NULL,
  ordered = FALSE,
  arrow_color = NULL,
  arrow_size = 0.3
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{points}}{(`data.frame` or `matrix` or `list`)\cr
The points to add.
- For 1D: A `data.frame` or `matrix` with one column for x-values, or a numeric vector of x-values. If y-values are not provided, they will be inferred if possible (e.g., for objective functions).
- For 2D/Surface: A `data.frame` or `matrix` with two columns (x1, x2), or a list of 2-element vectors.}

\item{\code{color}}{(`character(1)`)\cr
Color of the points. Use "auto" for automatic color assignment from palette. Default is "auto".}

\item{\code{size}}{(`numeric(1)`)\cr
Size of the points. If NULL, uses theme$point_size. Default is NULL.}

\item{\code{shape}}{(`integer(1)` or `character(1)`)\cr
Shape of the points. For ggplot2: integer codes (e.g., 19 for solid circle). For plotly: shape names. Default is 19/"circle".}

\item{\code{alpha}}{(`numeric(1)`)\cr
Alpha transparency of the points. If NULL, uses theme$alpha. Default is NULL.}

\item{\code{annotations}}{(`character`)\cr
Optional text labels for each point. If provided, must be the same length as the number of points.}

\item{\code{annotation_size}}{(`numeric(1)`)\cr
Size of annotation text. If NULL, defaults to text_size - 2 from plot().}

\item{\code{ordered}}{(`logical(1)`)\cr
If `TRUE`, draws arrows between consecutive points to indicate order. Default is `FALSE`.}

\item{\code{arrow_color}}{(`character(1)`)\cr
Color of arrows when ordered = TRUE. If NULL, uses point color.}

\item{\code{arrow_size}}{(`numeric(1)`)\cr
Length/size of arrows when `ordered = TRUE`. Default is 0.3 units in the coordinate system.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Visualizer-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Visualizer-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
