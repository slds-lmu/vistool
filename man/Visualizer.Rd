% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/visualizer.R
\name{Visualizer}
\alias{Visualizer}
\title{Visualizer class}
\description{
Visualizer class

Visualizer class
}
\details{
This class is used to create visualizations/animations of optimization traces.
The used plotting backend is plotly (https://plotly.com/).
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{objective}}{(`Objective`) The objective which was optimized. This object
is used to generate the surface/contour lines.}

\item{\code{grid}}{(`list()`) List with the `x1` and `x2` grid.}

\item{\code{zmat}}{(`matrix()`) The result of `objective$eval(x1, x2)` at each element of
the cross product of `grid$x1` and `grid$x2`.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Visualizer$new()}}
\item \href{#method-initLayerContour}{\code{Visualizer$initLayerContour()}}
\item \href{#method-initLayerSurface}{\code{Visualizer$initLayerSurface()}}
\item \href{#method-addLayerOptimizationTrace}{\code{Visualizer$addLayerOptimizationTrace()}}
\item \href{#method-setLayout}{\code{Visualizer$setLayout()}}
\item \href{#method-setScene}{\code{Visualizer$setScene()}}
\item \href{#method-plot}{\code{Visualizer$plot()}}
\item \href{#method-animate}{\code{Visualizer$animate()}}
\item \href{#method-save}{\code{Visualizer$save()}}
\item \href{#method-clone}{\code{Visualizer$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this [R6][R6::R6Class] class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$new(
  objective,
  x1limits = NULL,
  x2limits = NULL,
  padding = 0.1,
  auto_box = TRUE,
  npoints = 100L
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{objective}}{(`Objective`) The objective which was optimized. This object
is used to generate the surface/contour lines.}

\item{\code{x1limits}}{(`numeric(2)`) The x1 limits. Are set automatically if `auto_box = TRUE`.}

\item{\code{x2limits}}{(`numeric(2)`) The x2 limits. Are set automatically if `auto_box = TRUE`.}

\item{\code{padding}}{(`numeric(1)`) A margin that is added to x1limits and x2limits.
The x1 margin is calculated by `max(x1lmits) - min(x1limits) * padding`.}

\item{\code{auto_box}}{(`logical(1)`) If `TRUE`, the limits defined in `objective$limits_lower`
and `objective$limits_upper` are used. Note: If the limits are not defined, `x1limits` and
`x2limits` must be set.}

\item{\code{npoints}}{(`integer(1)`) The number of generated point per dimension. Note that
a grid of `npoints^2` values is generated and evaluated by `objective$eval(x)` to plot the surface.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-initLayerContour"></a>}}
\if{latex}{\out{\hypertarget{method-initLayerContour}{}}}
\subsection{Method \code{initLayerContour()}}{
Initialize the plot with contour lines.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$initLayerContour(
  opacity = 0.8,
  colorscale = list(c(0, 1), c("rgb(176,196,222)", "rgb(160,82,45)")),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opacity}}{(`numeric(1)`) Opacity of the layer.}

\item{\code{colorscale}}{(`list()`) The coloring of the surface.}

\item{\code{...}}{Further arguments passed to `add_trace(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-initLayerSurface"></a>}}
\if{latex}{\out{\hypertarget{method-initLayerSurface}{}}}
\subsection{Method \code{initLayerSurface()}}{
Initialize the plot as 3D surface.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$initLayerSurface(
  opacity = 0.8,
  colorscale = list(c(0, 1), c("rgb(176,196,222)", "rgb(160,82,45)")),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opacity}}{(`numeric(1)`) Opacity of the layer.}

\item{\code{colorscale}}{(`list()`) The coloring of the surface.}

\item{\code{...}}{Further arguments passed to `add_trace(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-addLayerOptimizationTrace"></a>}}
\if{latex}{\out{\hypertarget{method-addLayerOptimizationTrace}{}}}
\subsection{Method \code{addLayerOptimizationTrace()}}{
Add an optimization trace.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$addLayerOptimizationTrace(
  opt,
  line_color = colSampler(),
  mcolor_out = "black",
  npoints = NULL,
  npmax = NULL,
  name = NULL,
  offset = c(0, 0, 0),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opt}}{(`Optimizer`) The optimizer from which the archive is extracted and used to
plot the trace.}

\item{\code{line_color}}{(`character(1)`) The color of the trace.}

\item{\code{mcolor_out}}{(`character(1)`) The outer line color of the marker.}

\item{\code{npoints}}{(`integer(1)`) The number of used points from the archive. Default is `NULL`
which means that all points are used. If set, a sequence from 1 to `nrow(opt$archive)` is
created.}

\item{\code{npmax}}{(`integer(1)`) The number of points used from the sequence `seq_len(nrow(opt$archive))[seq_len(npmax)]`}

\item{\code{name}}{(`character(1)`) The name of the trace in the legend. Default is `NULL`
which means that the name is pasted from `opt$id` and `objective$id`.}

\item{\code{offset}}{(`numeric(3)`) Trace shift in direction (x, y, z).}

\item{\code{...}}{Further arguments passed to `add_trace(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setLayout"></a>}}
\if{latex}{\out{\hypertarget{method-setLayout}{}}}
\subsection{Method \code{setLayout()}}{
Set the layout of the plotly plot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$setLayout(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Layout options directly passed to `layout(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-setScene"></a>}}
\if{latex}{\out{\hypertarget{method-setScene}{}}}
\subsection{Method \code{setScene()}}{
Set the view for a 3D plot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$setScene(x, y, z)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(`numeric(1)`) The view from which the "camera looks down" to the plot.}

\item{\code{y}}{(`numeric(1)`) The view from which the "camera looks down" to the plot.}

\item{\code{z}}{(`numeric(1)`) The view from which the "camera looks down" to the plot.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-plot"></a>}}
\if{latex}{\out{\hypertarget{method-plot}{}}}
\subsection{Method \code{plot()}}{
Return the plot and hence plot it or do further processing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$plot()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-animate"></a>}}
\if{latex}{\out{\hypertarget{method-animate}{}}}
\subsection{Method \code{animate()}}{
Create an animation of `$plot()`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$animate(
  dir = "animation",
  nframes = 10L,
  view_start = list(x = 1, y = 1, z = 1),
  view_end = list(x = 1, y = 1, z = 1),
  fext = "png",
  stops = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{(`character(1)`) The directory in which all the images are saved.}

\item{\code{nframes}}{(`integer(1)`) The number of frames.}

\item{\code{view_start}}{(`list()`) The start view of the animation.}

\item{\code{view_end}}{(`list()`) The end view of the animation.}

\item{\code{fext}}{(`character(1)`) The file extension (default is `png`).}

\item{\code{stops}}{(`integer()`) The step / iteration in the archives of the optimizers
added by `$addLayerOptimizationTrace()` at which a frame is taken. Must have
exact the same length as defined in `nframes`. By default, a sequence with
equidistant points is generated for `stops`.}

\item{\code{...}}{Additional arguments passed to `$save(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-save"></a>}}
\if{latex}{\out{\hypertarget{method-save}{}}}
\subsection{Method \code{save()}}{
Save the plot by using plotlys `orca()` function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$save(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Further arguments passed to `orca()`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Visualizer$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
