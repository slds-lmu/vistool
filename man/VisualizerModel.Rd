% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VisualizerModel.R
\name{VisualizerModel}
\alias{VisualizerModel}
\title{Visualize Model (Unified 1D/2D)}
\value{
Returns self invisibly.

Returns self invisibly.
}
\description{
This class provides a unified interface for visualizing machine learning models
on both 1D and 2D tasks. It automatically detects the dimensionality and 
creates appropriate visualizations using ggplot2.
}
\section{Super class}{
\code{\link[vistool:Visualizer]{vistool::Visualizer}} -> \code{VisualizerModel}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{task}}{(`mlr3::Task`)\cr
Task used to train the model.}

\item{\code{learner}}{(`mlr3::Learner`)\cr
Learner used to train the model.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-VisualizerModel-new}{\code{VisualizerModel$new()}}
\item \href{#method-VisualizerModel-add_training_data}{\code{VisualizerModel$add_training_data()}}
\item \href{#method-VisualizerModel-add_boundary}{\code{VisualizerModel$add_boundary()}}
\item \href{#method-VisualizerModel-plot}{\code{VisualizerModel$plot()}}
\item \href{#method-VisualizerModel-clone}{\code{VisualizerModel$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="add_points"><a href='../../vistool/html/Visualizer.html#method-Visualizer-add_points'><code>vistool::Visualizer$add_points()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="initialize_defaults"><a href='../../vistool/html/Visualizer.html#method-Visualizer-initialize_defaults'><code>vistool::Visualizer$initialize_defaults()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="resolve_layer_colors"><a href='../../vistool/html/Visualizer.html#method-Visualizer-resolve_layer_colors'><code>vistool::Visualizer$resolve_layer_colors()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="save"><a href='../../vistool/html/Visualizer.html#method-Visualizer-save'><code>vistool::Visualizer$save()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerModel-new"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerModel-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this [R6][R6::R6Class] class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerModel$new(
  task,
  learner,
  x1_limits = NULL,
  x2_limits = NULL,
  padding = 0,
  n_points = 100L
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{task}}{([mlr3::Task])\cr
The task to train the model on.}

\item{\code{learner}}{(`mlr3::Learner`)\cr
The learner to train the model with.}

\item{\code{x1_limits}}{(`numeric(2)`)\cr
Limits for the first feature axis. For 1D tasks, this controls the x-axis range.
If NULL, will be determined from task data.}

\item{\code{x2_limits}}{(`numeric(2)`)\cr
Limits for the second feature axis (2D tasks only). Ignored for 1D tasks.
If NULL, will be determined from task data.}

\item{\code{padding}}{(`numeric(1)`)\cr
A margin that is added to x1limits and x2limits.
The x1 margin is calculated by `max(x1lmits) - min(x1limits) * padding`.}

\item{\code{padding}}{(`numeric(1)`)\cr
A margin that is added to x1limits and x2limits.
The x1 margin is calculated by `max(x1lmits) - min(x1limits) * padding`.}

\item{\code{n_points}}{(`integer(1)`)\cr
The number of generated point per dimension.
Note that a grid of `npoints^2` values is generated and evaluated by `objective$eval(x)` to plot the surface.}

\item{\code{n_points}}{(`integer(1)`)\cr
The number of generated point per dimension.
Note that a grid of `npoints^2` values is generated and evaluated by `objective$eval(x)` to plot the surface.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerModel-add_training_data"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerModel-add_training_data}{}}}
\subsection{Method \code{add_training_data()}}{
Adds the training data to the plot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerModel$add_training_data(
  color = "auto",
  size = 2,
  shape = 19,
  alpha = 1,
  show_labels = FALSE,
  label_size = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{color}}{(`character(1)` or named `character`)\cr
Color of the points. For classification tasks:
- `character(1)`: A single color for all points (e.g., `"blue"`) or `"auto"` for automatic color assignment.
- `named character`: A vector mapping class labels to colors (e.g., `c(pos = "red", neg = "blue")`).
For regression tasks, only single colors are supported. Default is `"auto"`.}

\item{\code{size}}{(`numeric(1)`)\cr
Size of the points. Default is 2.}

\item{\code{shape}}{(`numeric(1)` or named `numeric`)\cr
Shape of the points. For classification tasks, can be a named vector mapping class labels to shapes.
Default is 19 (filled circle).}

\item{\code{alpha}}{(`numeric(1)`)\cr
Alpha transparency of the points. Default is 1.}

\item{\code{show_labels}}{(`logical(1)`)\cr
Whether to show data point labels. Default is FALSE.}

\item{\code{label_size}}{(`numeric(1)`)\cr
Size of data point labels. If NULL, defaults to smaller text.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerModel-add_boundary"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerModel-add_boundary}{}}}
\subsection{Method \code{add_boundary()}}{
Adds boundary lines/contours to the plot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerModel$add_boundary(
  values = NULL,
  color = "black",
  linetype = "dashed",
  linewidth = 1,
  alpha = 0.8
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{values}}{(`numeric()`)\cr
Values at which to draw boundaries. For 1D: horizontal lines (y-values).
For 2D: contour lines (z-values). If NULL, uses sensible defaults based on prediction type.}

\item{\code{color}}{(`character(1)`)\cr
Color of the boundary lines. Default is "black".}

\item{\code{linetype}}{(`character(1)`)\cr
Line type for boundaries. For 1D: ggplot2 linetypes. For 2D: contour line types.
Default is "dashed".}

\item{\code{linewidth}}{(`numeric(1)`)\cr
Width of boundary lines. Default is 1.}

\item{\code{alpha}}{(`numeric(1)`)\cr
Alpha transparency of boundary lines. Default is 0.8.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerModel-plot"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerModel-plot}{}}}
\subsection{Method \code{plot()}}{
Create and return the plot with model-specific features.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerModel$plot(
  text_size = 11,
  title_size = NULL,
  theme = "minimal",
  background = "white",
  color_palette = "viridis",
  flatten = FALSE,
  layout = NULL,
  scene = NULL,
  plot_title = NULL,
  plot_subtitle = NULL,
  show_title = TRUE,
  x_lab = NULL,
  y_lab = NULL,
  z_lab = NULL,
  x_limits = NULL,
  y_limits = NULL,
  z_limits = NULL,
  show_grid = TRUE,
  grid_color = "gray90",
  show_legend = TRUE,
  legend_position = "right",
  legend_title = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{text_size}}{(`numeric(1)`)\cr
Base text size for plot elements. Default is 11.}

\item{\code{title_size}}{(`numeric(1)`)\cr
Title text size. If NULL, defaults to text_size + 2.}

\item{\code{theme}}{(`character(1)`)\cr
ggplot2 theme to use. One of "minimal", "bw", "classic", "gray", "light", "dark", "void". Default is "minimal".}

\item{\code{background}}{(`character(1)`)\cr
Background color. Default is "white".}

\item{\code{color_palette}}{(`character(1)`)\cr
Color palette for the fill scale. One of "viridis", "plasma", "grayscale". Default is "viridis".}

\item{\code{flatten}}{(`logical(1)`)\cr
For surface visualizers: if TRUE, display as 2D contour plot. Ignored for model visualizers. Default is FALSE.}

\item{\code{layout}}{(`list()`)\cr
For surface visualizers: layout options. Ignored for model visualizers. Default is NULL.}

\item{\code{scene}}{(`list()`)\cr
For surface visualizers: scene options for 3D plots. Ignored for model visualizers. Default is NULL.}

\item{\code{plot_title}}{(`character(1)`)\cr
Custom plot title. If NULL, uses default title.}

\item{\code{plot_subtitle}}{(`character(1)`)\cr
Plot subtitle. Default is NULL.}

\item{\code{show_title}}{(`logical(1)`)\cr
Whether to show the plot title. Default is TRUE.}

\item{\code{x_lab}}{(`character(1)`)\cr
Custom x-axis label. If NULL, uses feature name.}

\item{\code{y_lab}}{(`character(1)`)\cr
Custom y-axis label. If NULL, uses target name.}

\item{\code{z_lab}}{(`character(1)`)\cr
Z-axis label (for surface plots). If NULL, uses the visualizer's default label. Default is NULL.}

\item{\code{x_limits}}{(`numeric(2)`)\cr
X-axis limits as c(min, max). If NULL, uses default limits.}

\item{\code{y_limits}}{(`numeric(2)`)\cr
Y-axis limits as c(min, max). If NULL, uses default limits.}

\item{\code{z_limits}}{(`numeric(2)`)\cr
Z-axis limits as c(min, max) (for surface plots). If NULL, uses automatic limits. Default is NULL.}

\item{\code{show_grid}}{(`logical(1)`)\cr
Whether to show grid lines. Default is TRUE.}

\item{\code{grid_color}}{(`character(1)`)\cr
Grid line color. Default is "gray90".}

\item{\code{show_legend}}{(`logical(1)`)\cr
Whether to show the legend. Default is TRUE.}

\item{\code{legend_position}}{(`character(1)`)\cr
Legend position: "top", "right", "bottom", "left", "none". Default is "right".}

\item{\code{legend_title}}{(`character(1)`)\cr
Custom legend title. If NULL, uses default.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A ggplot2 object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerModel-clone"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerModel-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerModel$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
