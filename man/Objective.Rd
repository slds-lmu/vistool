% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Objective.R
\name{Objective}
\alias{Objective}
\title{Objective function}
\value{
Returns self invisibly.
}
\description{
This class defines the objective that is used for optimization.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{(`character(1)`)\cr
The id of the object.}

\item{\code{label}}{(`character(1)` The label of the objective, i.e. a.}

\item{\code{lower}}{(`numeric()`) The lower limits for each dimension.}

\item{\code{upper}}{(`numeric()`) The upper limits for each dimension.}

\item{\code{minimize}}{(`logical(1)`) Is the problem a minimization problem?}
}
\if{html}{\out{</div>}}
}
\section{Active bindings}{
\if{html}{\out{<div class="r6-active-bindings">}}
\describe{
\item{\code{archive}}{(`data.table()`) Archive of all calls to `$evalStore`.}

\item{\code{log_funs}}{(`list()`) A list containing logging functions. Each function must have argument.}

\item{\code{xdim}}{(`integer(1)`) Input dimension of `f`.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-Objective-new}{\code{Objective$new()}}
\item \href{#method-Objective-eval}{\code{Objective$eval()}}
\item \href{#method-Objective-evalStore}{\code{Objective$evalStore()}}
\item \href{#method-Objective-assertX}{\code{Objective$assertX()}}
\item \href{#method-Objective-grad}{\code{Objective$grad()}}
\item \href{#method-Objective-hess}{\code{Objective$hess()}}
\item \href{#method-Objective-addLogFun}{\code{Objective$addLogFun()}}
\item \href{#method-Objective-clearArchive}{\code{Objective$clearArchive()}}
\item \href{#method-Objective-clone}{\code{Objective$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-new"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this [R6][R6::R6Class] class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$new(
  id,
  fun,
  label = "f",
  xdim,
  lower = NA,
  upper = NA,
  xtest = NULL,
  minimize = FALSE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(`character(1)`)\cr
Id of the object.}

\item{\code{fun}}{(`function` The objective function. The first argument must be a numerical input of length `xdim`.}

\item{\code{label}}{(`character(1)` The label of the objective, i.e. a.}

\item{\code{xdim}}{(`integer(1)`) The input dimension of `fun`. Use `xdim = NA` for an arbitrary input dimension.}

\item{\code{lower}}{(`numeric(xdim)`) The lower boundaries for inputs to `fun`. Must}

\item{\code{upper}}{(`numeric(xdim)`) The upper boundaries for inputs to `fun`. Must
be of length `xdim`.}

\item{\code{xtest}}{(`numeric()`) Test value for `fun` during initialization. If not defined,
`xtest = rep(0, ifelse(is.na(xdim), 2, xdim))` is used.}

\item{\code{minimize}}{(`logical(1)`) Is the problem a minimization problem? Default is no (`FALSE`).}

\item{\code{...}}{\cr
Additional arguments passed to `fun`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-eval"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-eval}{}}}
\subsection{Method \code{eval()}}{
Evaluate the objective function.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$eval(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(`numeric`) The numerical input of `fun`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The result of `fun(x)`.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-evalStore"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-evalStore}{}}}
\subsection{Method \code{evalStore()}}{
Evaluate the objective function and log into the archive. Each call logs
the input vector `x`, result of fun `fval`, the gradient `grad`, the norm of the gradient
`gnorm`, and additional logs that were added by `$addLogFun`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$evalStore(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(`numeric`) The numerical input of `fun`.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Invisible list of logs that are added to the archive.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-assertX"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-assertX}{}}}
\subsection{Method \code{assertX()}}{
Assert a numeric input if it is suitable or not.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$assertX(x, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(`numeric()`) Input value for `fun`.}

\item{\code{...}}{Additional arguments passed to `assertNumeric(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-grad"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-grad}{}}}
\subsection{Method \code{grad()}}{
Evaluate the gradient of the objective function at x.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$grad(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(`numeric`) The numerical input of `fun`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-hess"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-hess}{}}}
\subsection{Method \code{hess()}}{
Evaluate the hessian of the objective function at x.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$hess(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(`numeric`) The numerical input of `fun`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-addLogFun"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-addLogFun}{}}}
\subsection{Method \code{addLogFun()}}{
Method to add custom logger to the objective.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$addLogFun(l, label)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{l}}{(`function`) Function that returns a single numerical value or a string.
The arguments of `l` must be `x`, `fval` and `grad`.}

\item{\code{label}}{(`character(1)`) The name of the logger.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-clearArchive"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-clearArchive}{}}}
\subsection{Method \code{clearArchive()}}{
Delete the archive.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$clearArchive()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-Objective-clone"></a>}}
\if{latex}{\out{\hypertarget{method-Objective-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Objective$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
