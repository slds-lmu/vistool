% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VisualizerSurfaceObj.R
\name{VisualizerSurfaceObj}
\alias{VisualizerSurfaceObj}
\title{Visualize Objective as Interactive Surface}
\description{
This class is used to create interactive surface visualizations and animations of optimization traces
for 2D objectives using plotly.
}
\section{Super classes}{
\code{\link[vistool:Visualizer]{vistool::Visualizer}} -> \code{\link[vistool:VisualizerSurface]{vistool::VisualizerSurface}} -> \code{VisualizerSurfaceObj}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{objective}}{(`Objective`)\cr
The objective function.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-VisualizerSurfaceObj-new}{\code{VisualizerSurfaceObj$new()}}
\item \href{#method-VisualizerSurfaceObj-add_optimization_trace}{\code{VisualizerSurfaceObj$add_optimization_trace()}}
\item \href{#method-VisualizerSurfaceObj-plot}{\code{VisualizerSurfaceObj$plot()}}
\item \href{#method-VisualizerSurfaceObj-add_taylor}{\code{VisualizerSurfaceObj$add_taylor()}}
\item \href{#method-VisualizerSurfaceObj-add_hessian}{\code{VisualizerSurfaceObj$add_hessian()}}
\item \href{#method-VisualizerSurfaceObj-animate}{\code{VisualizerSurfaceObj$animate()}}
\item \href{#method-VisualizerSurfaceObj-clone}{\code{VisualizerSurfaceObj$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="add_points"><a href='../../vistool/html/Visualizer.html#method-Visualizer-add_points'><code>vistool::Visualizer$add_points()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="resolve_layer_colors"><a href='../../vistool/html/Visualizer.html#method-Visualizer-resolve_layer_colors'><code>vistool::Visualizer$resolve_layer_colors()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="save"><a href='../../vistool/html/Visualizer.html#method-Visualizer-save'><code>vistool::Visualizer$save()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="set_theme"><a href='../../vistool/html/Visualizer.html#method-Visualizer-set_theme'><code>vistool::Visualizer$set_theme()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="theme"><a href='../../vistool/html/Visualizer.html#method-Visualizer-theme'><code>vistool::Visualizer$theme()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="VisualizerSurface" data-id="add_contours"><a href='../../vistool/html/VisualizerSurface.html#method-VisualizerSurface-add_contours'><code>vistool::VisualizerSurface$add_contours()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="VisualizerSurface" data-id="init_layer_contour"><a href='../../vistool/html/VisualizerSurface.html#method-VisualizerSurface-init_layer_contour'><code>vistool::VisualizerSurface$init_layer_contour()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="VisualizerSurface" data-id="init_layer_surface"><a href='../../vistool/html/VisualizerSurface.html#method-VisualizerSurface-init_layer_surface'><code>vistool::VisualizerSurface$init_layer_surface()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="VisualizerSurface" data-id="set_layout"><a href='../../vistool/html/VisualizerSurface.html#method-VisualizerSurface-set_layout'><code>vistool::VisualizerSurface$set_layout()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="VisualizerSurface" data-id="set_scene"><a href='../../vistool/html/VisualizerSurface.html#method-VisualizerSurface-set_scene'><code>vistool::VisualizerSurface$set_scene()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurfaceObj-new"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurfaceObj-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this [R6][R6::R6Class] class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurfaceObj$new(
  objective,
  x1_limits = NULL,
  x2_limits = NULL,
  padding = 0,
  n_points = 100L,
  allow_extrapolation = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{objective}}{(`Objective`)\cr
The objective to optimize.}

\item{\code{x1_limits}}{(`numeric(2)`)\cr
The x1 limits.}

\item{\code{x1_limits}}{(`numeric(2)`)\cr
The x1 limits.}

\item{\code{x2_limits}}{(`numeric(2)`)\cr
The x2 limits.}

\item{\code{x2_limits}}{(`numeric(2)`)\cr
The x2 limits.}

\item{\code{padding}}{(`numeric(1)`)\cr
A margin that is added to x1limits and x2limits.
The x1 margin is calculated by `max(x1lmits) - min(x1limits) * padding`.}

\item{\code{padding}}{(`numeric(1)`)\cr
A margin that is added to x1limits and x2limits.
The x1 margin is calculated by `max(x1lmits) - min(x1limits) * padding`.}

\item{\code{n_points}}{(`integer(1)`)\cr
The number of generated point per dimension.
Note that a grid of `npoints^2` values is generated and evaluated by `objective$eval(x)` to plot the surface.}

\item{\code{n_points}}{(`integer(1)`)\cr
The number of generated point per dimension.
Note that a grid of `npoints^2` values is generated and evaluated by `objective$eval(x)` to plot the surface.}

\item{\code{allow_extrapolation}}{(`logical(1)`)
Whether to evaluate the objective outside its evaluation (canonical) bounds when plot limits
extend further. If `FALSE` (default), values outside are masked (set to `NA`) producing blank
regions in the plot; if `TRUE`, the objective is called on the extended region (may yield
misleading or numerically extreme values depending on the function definition).}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurfaceObj-add_optimization_trace"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurfaceObj-add_optimization_trace}{}}}
\subsection{Method \code{add_optimization_trace()}}{
Add an optimization trace.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurfaceObj$add_optimization_trace(
  opt,
  line_color = NULL,
  mcolor_out = "black",
  npoints = NULL,
  npmax = NULL,
  name = NULL,
  offset = NULL,
  add_marker_at = 1,
  marker_shape = "circle",
  marker_color = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opt}}{(`Optimizer`)\cr
The optimizer from which the archive is extracted and used to plot the trace.}

\item{\code{line_color}}{(`character(1)`)\cr
The color of the trace.}

\item{\code{mcolor_out}}{(`character(1)`)\cr
The outer line color of the marker.}

\item{\code{npoints}}{(`integer(1)`)\cr
The number of used points from the archive.
Default is `NULL` which means that all points are used.
If set, a sequence from 1 to `nrow(opt$archive)` is created.}

\item{\code{npmax}}{(`integer(1)`)\cr
The number of points used from the sequence `seq_len(nrow(opt$archive))[seq_len(npmax)]`}

\item{\code{name}}{(`character(1)`)\cr
The name of the trace in the legend.
Default is `NULL` which means that the name is pasted from `opt$id` and `objective$id`.}

\item{\code{offset}}{(`numeric(3)`)\cr
Trace shift in direction (x, y, z).}

\item{\code{add_marker_at}}{(`integer()`)\cr
Vector of iterations at which a marker is added.}

\item{\code{marker_shape}}{(`character()`)\cr
Vector indicating the shape of the markers.
If `length(marker_shape) == 1`, all markers get the same shape.
The other option is to specify all markers individually by passing a vector of `length(add_marker_at)`.
For a list of all shapes see `schema(F)$traces$XXX$attributes$marker$symbol$values` with `XXX` one of `scatter` or `scatter3d`.
If `marker_shape = NA`, no marker are added.}

\item{\code{marker_color}}{(`character()`)\cr
The colors for the markers.}

\item{\code{...}}{Further arguments passed to `add_trace(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurfaceObj-plot"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurfaceObj-plot}{}}}
\subsection{Method \code{plot()}}{
Renders the surface plot with all added layers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurfaceObj$plot(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(`any`)\cr
Additional arguments passed to the parent plot method.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
The plotly object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurfaceObj-add_taylor"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurfaceObj-add_taylor}{}}}
\subsection{Method \code{add_taylor()}}{
Add a Taylor approximation (for 1 and 2 degrees).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurfaceObj$add_taylor(
  x0,
  degree = 2,
  x1margin = 0,
  x2margin = 0,
  npoints_per_dim = 20L,
  zlim = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x0}}{(`numeric()) `\cr
The point around which the approximation is done.}

\item{\code{degree}}{(`integer(1)`)\cr
The degree of the approximation (only 1 and 2 is implemented).}

\item{\code{x1margin}}{(`numeric(1)`)\cr
The "length" of the hyperplane in direction x1.}

\item{\code{x2margin}}{(`numeric(1)`)\cr
The "length" of the hyperplane in direction x2.}

\item{\code{npoints_per_dim}}{(`integer(1)`)\cr
Number of points per dimension for the plotting grid.}

\item{\code{zlim}}{(`numeric(2)`)\cr
The limits for z.
Can be helpful if the hyperplane as a huge z range and therefore the plot looks ugly.}

\item{\code{...}}{(`any`)\cr
Additional parameter passed to `add_surface()`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurfaceObj-add_hessian"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurfaceObj-add_hessian}{}}}
\subsection{Method \code{add_hessian()}}{
Add two "arrows" as eigenvectors of the Hessian.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurfaceObj$add_hessian(x0, x1length = 0.1, x2length = 0.1, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x0}}{(`numeric(2)`)\cr
The point at which the Hessian is calculated.}

\item{\code{x1length}}{(`numeric(1)`)\cr
The length of the first eigenvector.}

\item{\code{x2length}}{(`numeric(1)`)\cr
The length of the second eigenvector.}

\item{\code{...}}{(`any`)\cr
Additional arguments passed to `add_trace`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurfaceObj-animate"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurfaceObj-animate}{}}}
\subsection{Method \code{animate()}}{
Create an animation of `$plot()`.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurfaceObj$animate(
  dir = "animation",
  nframes = 10L,
  view_start = list(x = 1, y = 1, z = 1),
  view_end = list(x = 1, y = 1, z = 1),
  fext = "png",
  stops = NULL,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dir}}{(`character(1)`)\cr
The directory in which all the images are saved.}

\item{\code{nframes}}{(`integer(1)`)\cr
The number of frames.}

\item{\code{view_start}}{(`list()`)\cr
The start view of the animation.}

\item{\code{view_end}}{(`list()`)\cr
The end view of the animation.}

\item{\code{fext}}{(`character(1)`)\cr
The file extension (default is `png`).}

\item{\code{stops}}{(`integer()`)\cr
The step / iteration in the archives of the optimizers added by `$addLayerOptimizationTrace()` at which a frame is taken.
Must have exact the same length as defined in `nframes`.
By default, a sequence with equidistant points is generated for `stops`.}

\item{\code{...}}{(`any`)\cr
Additional arguments passed to `$save(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurfaceObj-clone"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurfaceObj-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurfaceObj$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
