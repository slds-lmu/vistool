% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/VisualizerSurface.R
\name{VisualizerSurface}
\alias{VisualizerSurface}
\title{Visualize 2D Functions as Interactive Surfaces}
\description{
Visualizes a two-dimensional function \eqn{f: \mathbb{R}^2 \to \mathbb{R}} via interactive plotly renderings.
Creates 3D surface and contour plots for better visualization of 2D functions.
}
\section{Super class}{
\code{\link[vistool:Visualizer]{vistool::Visualizer}} -> \code{VisualizerSurface}
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{grid}}{(`list()`)\cr
List with the `x1` and `x2` grid.}

\item{\code{zmat}}{(`matrix()`)\cr
The result of evaluation at each element of the cross product of `grid$x1` and `grid$x2`.}

\item{\code{plot_lab}}{(character(1)\cr
Label of the plot.}

\item{\code{x1_lab}}{(character(1)\cr
Label of the x1 axis.}

\item{\code{x2_lab}}{(character(1)\cr
Label of the x2 axis.}

\item{\code{z_lab}}{(character(1)\cr
Label of the z axis.}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-VisualizerSurface-new}{\code{VisualizerSurface$new()}}
\item \href{#method-VisualizerSurface-init_layer_contour}{\code{VisualizerSurface$init_layer_contour()}}
\item \href{#method-VisualizerSurface-init_layer_surface}{\code{VisualizerSurface$init_layer_surface()}}
\item \href{#method-VisualizerSurface-set_layout}{\code{VisualizerSurface$set_layout()}}
\item \href{#method-VisualizerSurface-set_scene}{\code{VisualizerSurface$set_scene()}}
\item \href{#method-VisualizerSurface-add_contours}{\code{VisualizerSurface$add_contours()}}
\item \href{#method-VisualizerSurface-plot}{\code{VisualizerSurface$plot()}}
\item \href{#method-VisualizerSurface-clone}{\code{VisualizerSurface$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="add_points"><a href='../../vistool/html/Visualizer.html#method-Visualizer-add_points'><code>vistool::Visualizer$add_points()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="resolve_layer_colors"><a href='../../vistool/html/Visualizer.html#method-Visualizer-resolve_layer_colors'><code>vistool::Visualizer$resolve_layer_colors()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="save"><a href='../../vistool/html/Visualizer.html#method-Visualizer-save'><code>vistool::Visualizer$save()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="set_theme"><a href='../../vistool/html/Visualizer.html#method-Visualizer-set_theme'><code>vistool::Visualizer$set_theme()</code></a></span></li>
<li><span class="pkg-link" data-pkg="vistool" data-topic="Visualizer" data-id="theme"><a href='../../vistool/html/Visualizer.html#method-Visualizer-theme'><code>vistool::Visualizer$theme()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-new"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-new}{}}}
\subsection{Method \code{new()}}{
Creates a new instance of this [R6][R6::R6Class] class.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$new(
  grid,
  zmat,
  plot_lab = NULL,
  x1_lab = "x1",
  x2_lab = "x2",
  z_lab = "z"
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{grid}}{(`list()`)\cr
List with the `x1` and `x2` grid.}

\item{\code{zmat}}{(`matrix()`)\cr
The result of evaluation at each element of the cross product of `grid$x1` and `grid$x2`.}

\item{\code{plot_lab}}{(`character(1)`)\cr
Label of the plot.}

\item{\code{x1_lab}}{(`character(1)`)\cr
Label of the x1 axis.}

\item{\code{x2_lab}}{(`character(1)`)\cr
Label of the x2 axis.}

\item{\code{z_lab}}{(`character(1)`)\cr
Label of the z axis.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-init_layer_contour"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-init_layer_contour}{}}}
\subsection{Method \code{init_layer_contour()}}{
Initialize the plot as 2D contour.
This method is called automatically by plot() and should not be called directly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$init_layer_contour(
  opacity = NULL,
  colorscale = NULL,
  show_title = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opacity}}{(`numeric(1)`)\cr
Opacity of the contour plot (0-1). If NULL, uses theme default.}

\item{\code{colorscale}}{(`list`)\cr
Color scale for the contour plot. If NULL or "auto", uses theme palette.}

\item{\code{show_title}}{(`logical(1)`)\cr
Whether to show the plot title. Default is TRUE.}

\item{\code{...}}{(`any`)\cr
Further arguments passed to `add_trace(...)`.}

\item{\code{...}}{(`any`)\cr
Further arguments passed to `add_trace(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-init_layer_surface"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-init_layer_surface}{}}}
\subsection{Method \code{init_layer_surface()}}{
Initialize the plot as 3D surface.
This method is called automatically by plot() and should not be called directly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$init_layer_surface(
  opacity = NULL,
  colorscale = NULL,
  show_title = TRUE,
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{opacity}}{(`numeric(1)`)\cr
Opacity of the surface plot (0-1). If NULL, uses theme default.}

\item{\code{colorscale}}{(`list`)\cr
Color scale for the surface plot. If NULL or "auto", uses theme palette.}

\item{\code{show_title}}{(`logical(1)`)\cr
Whether to show the plot title. Default is TRUE.}

\item{\code{...}}{(`any`)\cr
Further arguments passed to `add_trace(...)`.}

\item{\code{...}}{(`any`)\cr
Further arguments passed to `add_trace(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-set_layout"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-set_layout}{}}}
\subsection{Method \code{set_layout()}}{
Set the layout of the plotly plot.
This method is used internally by plot(layout = ...) and should not be called directly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$set_layout(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{Layout options directly passed to `layout(...)`.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-set_scene"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-set_scene}{}}}
\subsection{Method \code{set_scene()}}{
Set the view for a 3D plot.
This method is used internally by plot(scene = ...) and should not be called directly.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$set_scene(x, y, z)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(`numeric(1)`) The view from which the "camera looks down" to the plot.}

\item{\code{y}}{(`numeric(1)`) The view from which the "camera looks down" to the plot.}

\item{\code{z}}{(`numeric(1)`) The view from which the "camera looks down" to the plot.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-add_contours"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-add_contours}{}}}
\subsection{Method \code{add_contours()}}{
Add contours to the surface plot.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$add_contours(contours = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{contours}}{(`list()` or `NULL`)\cr
Custom contour configuration. If `NULL` (default), adds default z-projected contours.
Can specify x, y, and z contours with custom properties like start, end, size, and color.
See plotly documentation for detailed contour options.}

\item{\code{...}}{Additional arguments passed to the contour trace.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Self (invisibly) for method chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-plot"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-plot}{}}}
\subsection{Method \code{plot()}}{
Create and return the plotly plot with model-specific layers.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$plot(flatten = FALSE, layout = NULL, scene = NULL, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{flatten}}{(`logical(1)`)\cr
If TRUE, display as 2D contour plot. If FALSE, display as 3D surface plot.}

\item{\code{layout}}{(`list()`)\cr
Layout options passed to `plotly::layout()`. Ignored by other visualizer types. Default is NULL.}

\item{\code{scene}}{(`list()`)\cr
Scene options for 3D plots. Ignored by other visualizer types. Default is NULL.}

\item{\code{...}}{Additional arguments passed to the parent plot method.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
A plotly object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-VisualizerSurface-clone"></a>}}
\if{latex}{\out{\hypertarget{method-VisualizerSurface-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{VisualizerSurface$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
