[{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://slds-lmu.github.io/vistool/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://slds-lmu.github.io/vistool/articles/loss_functions.html","id":"loss-functions","dir":"Articles","previous_headings":"","what":"Loss Functions","title":"Visualization of Loss Functions","text":"VisualizerLossFunction class visualizes loss functions. Loss functions wrapped LossFunction objects. package includes predefined loss functions used classification regression. get loss function dictionary, use lss() function retrieve hinge loss function classification.","code":"library(vistool) as.data.table(dict_loss) #> Key: <key> #>              key             label properties #>           <char>            <char>     <list> #> 1: cross-entropy     Cross-Entropy    classif #> 2:         hinge        Hinge Loss    classif #> 3:         huber        Huber Loss       regr #> 4:         l1_ae L1 Absolute Error       regr #> 5:         l2_se  L2 Squared Error       regr #> 6:      log-cosh     Log-Cosh Loss       regr loss_function = lss(\"hinge\")"},{"path":"https://slds-lmu.github.io/vistool/articles/loss_functions.html","id":"visualization","dir":"Articles","previous_headings":"","what":"Visualization","title":"Visualization of Loss Functions","text":"visualize loss function, use as_visualizer() function. y_pred arguments contains \\(y * f(x)\\) y_true true value \\(y\\). Use plot() method plot loss function.","code":"vis = as_visualizer(loss_function, y_pred = seq(-4, 4), y_true = 1) vis$plot()"},{"path":[]},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"custom-objectives","dir":"Articles","previous_headings":"","what":"Custom Objectives","title":"Visualization of Objective Functions","text":"Let’s define loss linear model iris data target Sepal.Width feature Petal.Width. First, Objective requires function evaluation: fix loss data, Ojbective$new() call allows pass custom arguments stored reused every call $eval() evaluate fun. , calling $eval(x) internally calls fun(x, ...). arguments must specified just : Visualize lm Objective: advanced (see advanced) add points plotly object:","code":"# Define the linear model loss function as SSE: l2norm = function(x) sqrt(sum(crossprod(x)))  mylm = function(x, Xmat, y) {   l2norm(y - Xmat %*% x) } # Use the iris dataset with response `Sepal.Width` and feature `Petal.Width`: Xmat = model.matrix(~ Petal.Width, data = iris) y = iris$Sepal.Width  # Create a new object: obj_lm = Objective$new(id = \"iris LM\", fun = mylm, xdim = 2,  Xmat = Xmat, y = y, minimize = TRUE)  obj_lm$evalStore(c(1, 2)) obj_lm$evalStore(c(2, 3)) obj_lm$evalStore(coef(lm(Sepal.Width ~ Petal.Width, data = iris)))  obj_lm$archive #>                        x      fval                      grad        gnorm #>                   <list>     <num>                    <list>        <num> #> 1:                   1,2 21.553654        2.375467,11.722838 1.196109e+01 #> 2:                   2,3 43.410022        8.779078,16.929270 1.907020e+01 #> 3:  3.3084256,-0.2093598  4.951004 4.832272e-07,2.664535e-07 5.518206e-07 viz_lm = as_visualizer(obj_lm, x1_limits = c(-0.5, 5), x2_limits = c(-3.2, 2.8)) viz_lm$plot() x = sapply(obj_lm$archive$x, function(x) x[1]) y = sapply(obj_lm$archive$x, function(x) x[2])  viz_lm$plot() %>% add_trace(x = x, y = y, z = obj_lm$archive$fval, type = \"scatter3d\", mode = \"markers\")"},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"optimizer","dir":"Articles","previous_headings":"","what":"Optimizer","title":"Visualization of Objective Functions","text":"optimizer class defines optimization strategy initialized taking objective function, start value, learning rate. Available optimizer : Gradient descent OptimizerGD Momentum OptimizerMomentum Nesterovs momentum OptimizerNAG Creating optimizer done (let’s use x value works well): value set, optimization done calling $optimize() number steps argument: Calling $optimize() also writes archive optimizer also calls $evalStore() objective. Therefore, $optimize() writes two archives: can let algorithm run another 10 iterations second batch: Still satisfying.","code":"obj_banana = obj(\"TF_banana\") opt = OptimizerGD$new(obj_banana, x_start = c(0.8, 0.6), lr = 0.01) opt$optimize(10L) #> TF_banana: Batch 1 step 1: f(x) = 0.1572, x = c(0.7352, 0.5778) #> TF_banana: Batch 1 step 2: f(x) = 0.4955, x = c(0.7888, 0.6174) #> TF_banana: Batch 1 step 3: f(x) = 0.2118, x = c(0.7296, 0.5977) #> TF_banana: Batch 1 step 4: f(x) = 0.3741, x = c(0.792, 0.6455) #> TF_banana: Batch 1 step 5: f(x) = 0.069, x = c(0.6932, 0.602) #> TF_banana: Batch 1 step 6: f(x) = 0.2809, x = c(0.7189, 0.6245) #> TF_banana: Batch 1 step 7: f(x) = 0.2565, x = c(0.7877, 0.6806) #> TF_banana: Batch 1 step 8: f(x) = 0.1753, x = c(0.6922, 0.6351) #> TF_banana: Batch 1 step 9: f(x) = 0.6265, x = c(0.7418, 0.6799) #> TF_banana: Batch 1 step 10: f(x) = 0.5908, x = c(0.717, 0.6795) opt$archive #>                   x_out                x_in                      update #>                  <list>              <list>                      <list> #>  1: 0.7351819,0.5778020             0.8,0.6     -0.06481810,-0.02219798 #>  2: 0.7888135,0.6173630 0.7351819,0.5778020       0.05363157,0.03956093 #>  3: 0.7296113,0.5977212 0.7888135,0.6173630     -0.05920220,-0.01964177 #>  4: 0.7920259,0.6454892 0.7296113,0.5977212       0.06241458,0.04776799 #>  5: 0.6931781,0.6019537 0.7920259,0.6454892     -0.09884780,-0.04353545 #>  6: 0.7189369,0.6245137 0.6931781,0.6019537       0.02575889,0.02256001 #>  7: 0.7876975,0.6806080 0.7189369,0.6245137       0.06876058,0.05609425 #>  8: 0.6921665,0.6351359 0.7876975,0.6806080     -0.09553100,-0.04547204 #>  9: 0.7417730,0.6798539 0.6921665,0.6351359       0.04960652,0.04471794 #> 10: 0.7170136,0.6795146 0.7417730,0.6798539 -0.0247594837,-0.0003392663 #>       fval_out    fval_in    lr step_size #>          <num>      <num> <num>     <num> #>  1: 0.15716889 0.46245779  0.01         1 #>  2: 0.49548040 0.15716889  0.01         1 #>  3: 0.21179976 0.49548040  0.01         1 #>  4: 0.37414391 0.21179976  0.01         1 #>  5: 0.06900854 0.37414391  0.01         1 #>  6: 0.28085919 0.06900854  0.01         1 #>  7: 0.25645358 0.28085919  0.01         1 #>  8: 0.17532134 0.25645358  0.01         1 #>  9: 0.62647891 0.17532134  0.01         1 #> 10: 0.59083776 0.62647891  0.01         1 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     objectivelist> #>  1: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  2: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  3: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  4: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  5: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  6: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  7: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  8: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>  9: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #> 10: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>     momentum  step batch #>        <num> <int> <num> #>  1:        0     1     1 #>  2:        0     2     1 #>  3:        0     3     1 #>  4:        0     4     1 #>  5:        0     5     1 #>  6:        0     6     1 #>  7:        0     7     1 #>  8:        0     8     1 #>  9:        0     9     1 #> 10:        0    10     1 opt$objective$archive #>                       x       fval                    grad     gnorm #>                  <list>      <num>                  <list>     <num> #>  1:             0.8,0.6 0.46245779     -6.481810,-2.219798  6.851377 #>  2: 0.7351819,0.5778020 0.15716889       5.363157,3.956093  6.664393 #>  3: 0.7888135,0.6173630 0.49548040     -5.920220,-1.964177  6.237547 #>  4: 0.7296113,0.5977212 0.21179976       6.241458,4.776799  7.859618 #>  5: 0.7920259,0.6454892 0.37414391     -9.884780,-4.353545 10.801029 #>  6: 0.6931781,0.6019537 0.06900854       2.575889,2.256001  3.424142 #>  7: 0.7189369,0.6245137 0.28085919       6.876058,5.609425  8.873884 #>  8: 0.7876975,0.6806080 0.25645358     -9.553100,-4.547204 10.580113 #>  9: 0.6921665,0.6351359 0.17532134       4.960652,4.471794  6.678699 #> 10: 0.7417730,0.6798539 0.62647891 -2.47594837,-0.03392663  2.476181 opt$optimize(10L) #> TF_banana: Batch 2 step 1: f(x) = 0.2592, x = c(0.7638, 0.728) #> TF_banana: Batch 2 step 2: f(x) = 0.2873, x = c(0.6702, 0.679) #> TF_banana: Batch 2 step 3: f(x) = 0.5391, x = c(0.7292, 0.7404) #> TF_banana: Batch 2 step 4: f(x) = 0.1765, x = c(0.6349, 0.6896) #> TF_banana: Batch 2 step 5: f(x) = 0.6858, x = c(0.6718, 0.7368) #> TF_banana: Batch 2 step 6: f(x) = 0.401, x = c(0.713, 0.7914) #> TF_banana: Batch 2 step 7: f(x) = 0.3109, x = c(0.6133, 0.7283) #> TF_banana: Batch 2 step 8: f(x) = 0.8142, x = c(0.657, 0.7963) #> TF_banana: Batch 2 step 9: f(x) = 0.7474, x = c(0.6208, 0.7806) #> TF_banana: Batch 2 step 10: f(x) = 0.5501, x = c(0.6575, 0.8468)"},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"visualize-optimization-traces","dir":"Articles","previous_headings":"","what":"Visualize Optimization Traces","title":"Visualization of Objective Functions","text":"layer Visualizer class $add_optimization_trace() gets optimizer argument adds optimization trace plot:","code":"viz = as_visualizer(obj_banana) viz$add_optimization_trace(opt) viz$plot()"},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"step-size-control","dir":"Articles","previous_headings":"Visualize Optimization Traces","what":"Step size control","title":"Visualization of Objective Functions","text":"calling $optimize(), second argument stepSizeControl allows expand compress update added old value \\(x\\). example, GD \\(x_{\\text{new}} = x_{\\text{old}} + lr * \\Delta_f(x_{\\text{old}})\\) update \\(u = lr * \\Delta_f(x_{\\text{old}})\\) multiplied return value stepSizeControl(). pre-implemented control functions like line search various decaying methods: stepSizeControlLineSearch(lower, upper): Conduct line search \\(\\) \\(x_{\\text{new}} = x_{\\text{old}} +  * lr * \\Delta_f(x_{\\text{old}})\\)`. stepSizeControlDecayTime(decay): Lower updates \\((1 + decay * iteration)^{-1}\\). stepSizeControlDecayExp(decay): Lower updates \\(exp(-decay * iteration)\\). stepSizeControlDecayLinear(iter_zero): Lower updates iter_zero reached. Updates iter > iter_zero 0. stepSizeControlDecaySteps(drop_rate, every_iter): Lower updates every_iter drop_rate. Note functions return function contains function required signature: Let’s define multiple gradient descent optimizers optimize 100 steps step size control: now don’t know well worked. Let’s collect archives mergeOptimArchives() visualize step sizes function values patchwork magic:  Visualizing traces done adding optimization trace layer. can optimizers add multiple traces plot (colors picked randomly, see Visualizer section details plotting): Practically, issue also combine multiple control functions. important thing keep signature function allowing function get arguments x (current value), u (current update), obj (Objective object), opt (Optimizer object):","code":"stepSizeControlDecayTime() #> function (x, u, obj, opt)  #> { #>     assertStepSizeControl(x, u, obj, opt) #>     epoch = nrow(obj$archive) #>     return(1/(1 + decay * epoch)) #> } #> <bytecode: 0x561beffd13f0> #> <environment: 0x561beffd09e0> x0 = c(0.8, 0.6) lr = 0.01 obj_banana = obj(\"TF_banana\")  oo1 = OptimizerGD$new(obj_banana, x_start = x0, lr = lr, id = \"GD without LR Control\", print_trace = FALSE) oo2 = OptimizerGD$new(obj_banana, x_start = x0, lr = lr, id = \"GD with Line Search\", print_trace = FALSE) oo3 = OptimizerGD$new(obj_banana, x_start = x0, lr = lr, id = \"GD with Time Decay\", print_trace = FALSE) oo4 = OptimizerGD$new(obj_banana, x_start = x0, lr = lr, id = \"GD with Exp Decay\", print_trace = FALSE) oo5 = OptimizerGD$new(obj_banana, x_start = x0, lr = lr, id = \"GD with Linear Decay\", print_trace = FALSE) oo6 = OptimizerGD$new(obj_banana, x_start = x0, lr = lr, id = \"GD with Step Decay\", print_trace = FALSE)  oo1$optimize(steps = 100) oo2$optimize(steps = 100, stepSizeControlLineSearch()) oo3$optimize(steps = 100, stepSizeControlDecayTime()) oo4$optimize(steps = 100, stepSizeControlDecayExp()) oo5$optimize(steps = 100, stepSizeControlDecayLinear()) oo6$optimize(steps = 100, stepSizeControlDecaySteps()) arx = mergeOptimArchives(oo1, oo2, oo3, oo4, oo5, oo6)  library(patchwork) gg1 = ggplot(arx, aes(x = iteration, y = step_size, color = optim_id)) gg2 = ggplot(arx, aes(x = iteration, y = fval_out, color = optim_id))  (gg1 + ggtitle(\"Step sizes\") |  gg1 + ylim(0, 1) + ggtitle(\"Step sizes (zoomed)\") |  gg2 + ggtitle(\"Objective\")) +   plot_layout(guides = \"collect\") &   geom_line() &   theme_minimal() &   theme(legend.position = \"bottom\") &   ggsci::scale_color_simpsons() viz = as_visualizer(obj_banana)  viz$add_optimization_trace(oo1) viz$add_optimization_trace(oo2) viz$add_optimization_trace(oo3) viz$add_optimization_trace(oo4) viz$add_optimization_trace(oo5) viz$add_optimization_trace(oo6)  viz$plot() myStepSizeControl = function(x, u, obj, opt) {   sc1 = stepSizeControlLineSearch(0, 10)   sc2 = stepSizeControlDecayTime(0.1)   return(sc1(x, u, obj, opt) * sc2(x, u, obj, opt)) }  my_oo = OptimizerGD$new(obj_banana, x_start = x0, lr = lr, id = \"GD without LR Control\", print_trace = FALSE) my_oo$optimize(100, myStepSizeControl) tail(my_oo$archive) #>                  x_out                x_in                      update fval_out #>                 <list>              <list>                      <list>    <num> #> 1: 0.5000029,0.8666667 0.5000032,0.8666667 -5.170309e-07, 1.110223e-10        1 #> 2: 0.5000026,0.8666667 0.5000029,0.8666667   -4.67848e-07, 0.00000e+00        1 #> 3: 0.5000024,0.8666667 0.5000026,0.8666667 -4.238832e-07,-1.110223e-10        1 #> 4: 0.5000022,0.8666667 0.5000024,0.8666667 -3.843592e-07, 1.110223e-10        1 #> 5: 0.5000020,0.8666667 0.5000022,0.8666667 -3.487211e-07, 0.000000e+00        1 #> 6: 0.5000018,0.8666667 0.5000020,0.8666667 -3.168577e-07, 0.000000e+00        1 #>    fval_in    lr step_size #>      <num> <num>     <num> #> 1:       1  0.01 0.5942504 #> 2:       1  0.01 0.5888878 #> 3:       1  0.01 0.5829326 #> 4:       1  0.01 0.5774413 #> 5:       1  0.01 0.5722183 #> 6:       1  0.01 0.5667869 #>                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    objectivelist> #> 1: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #> 2: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #> 3: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #> 4: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #> 5: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #> 6: <Objective>\\n  Public:\\n    addLogFun: function (l, label) \\n    archive: active binding\\n    assertX: function (x, ...) \\n    clearArchive: function () \\n    clone: function (deep = FALSE) \\n    eval: function (x) \\n    evalStore: function (x) \\n    grad: function (x) \\n    hess: function (x) \\n    id: TF_banana\\n    initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA, \\n    label: banana\\n    limits_lower: 0 0\\n    limits_upper: 1 1\\n    log_funs: active binding\\n    minimize: FALSE\\n    xdim: active binding\\n  Private:\\n    p_archive: data.table, data.frame\\n    p_fargs: list\\n    p_fun: function (x, scale_it = T, scale_low = c(-20, -10), scale_high = c(20, \\n    p_gradient: NULL\\n    p_gradientFallback: function (x, ...) \\n    p_hessian: NULL\\n    p_hessianFallback: function (x, ...) \\n    p_log_funs: list\\n    p_xdim: 2\\n    p_xtest: 0 0 #>    momentum  step batch #>       <num> <int> <num> #> 1:        0    95     1 #> 2:        0    96     1 #> 3:        0    97     1 #> 4:        0    98     1 #> 5:        0    99     1 #> 6:        0   100     1"},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"visualizer-class","dir":"Articles","previous_headings":"Visualizer","what":"Visualizer class","title":"Visualization of Objective Functions","text":"Visualizer class initialized calling as_visualizer(obj) given Objective. Furhter arguments x1limits x2limits well padding stretch limits factor npoints specify number generated point per dimension, hence npoints^2 points evaluated create initial layers.","code":""},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"initial-layers","dir":"Articles","previous_headings":"Visualizer","what":"Initial layers","title":"Visualization of Objective Functions","text":"initial layer always required layers (optimization traces) added step step. two available base layers contour lines $init_layer_contour() $init_layer_surface(). , first argument tis opacity second colorscale: Internally, add_trace() plotly called. arguments directly passed , e.g. adding contour lines:","code":"viz = as_visualizer(obj(\"TF_franke\")) viz$init_layer_contour(opacity = 1, colorscale = list(c(0, 1), c(\"rgb(176,196,222)\", \"rgb(160,82,45)\"))) viz$plot() viz = as_visualizer(obj(\"TF_franke\")) viz$init_layer_contour(colorscale = list(c(0, 1), c(\"white\", \"blue\"))) viz$plot() viz = as_visualizer(obj(\"TF_franke\")) viz$init_layer_surface(opacity = 1, colorscale = list(c(0, 1), c(\"white\", \"black\"))) viz$plot() viz = as_visualizer(obj(\"TF_franke\"))  # Add 10 grid lines per dim, limits (sometimes) can be obtained form the # objective: llower = viz$objective$limits_lower lupper = viz$objective$limits_upper ssize = (lupper - llower) / 10  viz$init_layer_surface(opacity = 1, colorscale = list(c(0, 1), c(\"white\", \"black\")),   contours = list(     x = list(show = TRUE, start = llower[1], end = lupper[1], size = ssize[1], color = \"black\"),     y = list(show = TRUE, start = llower[2], end = lupper[2], size = ssize[2], color = \"black\"))) viz$plot()"},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"optimization-traces","dir":"Articles","previous_headings":"Visualizer","what":"Optimization traces","title":"Visualization of Objective Functions","text":"shown previously, optimization traces can added $add_optimization_trace. Let’s optimize custom linear model objective three available optimizers:","code":"# Reset the archive to have an empty objective: obj_lm$clearArchive()  oo1 = OptimizerGD$new(obj_lm, x_start = c(0, -0.05), lr = 0.001, print_trace = FALSE) oo2 = OptimizerMomentum$new(obj_lm, x_start = c(-0.05, 0), lr = 0.001, print_trace = FALSE) oo3 = OptimizerNAG$new(obj_lm, x_start = c(0, 0), lr = 0.001, print_trace = FALSE)  oo1$optimize(steps = 100) oo2$optimize(steps = 100) oo3$optimize(steps = 100) viz = as_visualizer(obj_lm, x1_limits = c(-0.5, 5), x2_limits = c(-3.2, 2.8))  viz$init_layer_contour()  viz$add_optimization_trace(oo1, add_marker_at = round(seq(1, 100, len = 10L))) viz$add_optimization_trace(oo2, add_marker_at = c(1, 50, 90), marker_shape = c(\"square\", \"star-triangle-down\", \"cross\")) viz$add_optimization_trace(oo3, add_marker_at = 100, marker_shape = \"star\")  viz$plot()"},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"setting-the-layout-and-scene-todo","dir":"Articles","previous_headings":"Visualizer","what":"Setting the layout and scene (TODO)","title":"Visualization of Objective Functions","text":"","code":"viz$set_layout(legend = list(orientation = \"h\", xanchor = \"center\", x = 0.5)) viz$plot()"},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"overlaying-layers-todo","dir":"Articles","previous_headings":"Visualizer","what":"Overlaying layers (TODO)","title":"Visualization of Objective Functions","text":"","code":"obj = obj(\"TF_banana\") viz = as_visualizer(obj) viz$init_layer_surface()  x0 = c(0.85, 0.47) viz$add_layer_taylor(x0, npoints_per_dim = 5, degree = 1, x1margin = 0.3, x2margin = 0.3, contours = list(     x = list(show = TRUE, start = 0, end = 1, size = 0.03, color = \"black\"),     y = list(show = TRUE, start = 0, end = 1, size = 0.03, color = \"black\"))) viz$add_layer_hessian(x0) viz$plot()"},{"path":"https://slds-lmu.github.io/vistool/articles/objective.html","id":"manual-layers-todo","dir":"Articles","previous_headings":"Visualizer","what":"Manual layers (TODO)","title":"Visualization of Objective Functions","text":"","code":"obj = obj(\"TF_banana\") viz = as_visualizer(obj) viz$init_layer_surface(opacity = 0.5) p = viz$plot() class(p) #> [1] \"plotly\"     \"htmlwidget\"  nsim = 100 grid = data.frame(x = runif(nsim), y = runif(nsim)) grid$z = apply(grid, 1, viz$objective$eval) + rnorm(nsim, sd = 0.05) p %>% add_trace(data = grid, x = ~x, y = ~y, z = ~z, mode = \"markers\",   type = \"scatter3d\", marker = list(symbol = \"cross\")) # List of marker symbols: head(schema(F)$traces$scatter3d$attributes$marker$symbol$values) #> [1] \"circle\"       \"circle-open\"  \"cross\"        \"diamond\"      \"diamond-open\" #> [6] \"square\""},{"path":[]},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Marc Becker. Author. Daniel Schalk. Author, maintainer. Lukas Burk. Author.","code":""},{"path":"https://slds-lmu.github.io/vistool/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Becker M, Schalk D, Burk L (2024). vistool: Visualize optimization methods. R package version 0.1.0, https://slds-lmu.github.io/vistool/.","code":"@Manual{,   title = {vistool: Visualize optimization methods},   author = {Marc Becker and Daniel Schalk and Lukas Burk},   year = {2024},   note = {R package version 0.1.0},   url = {https://slds-lmu.github.io/vistool/}, }"},{"path":"https://slds-lmu.github.io/vistool/index.html","id":"vistool","dir":"","previous_headings":"","what":"Visualize optimization methods","title":"Visualize optimization methods","text":"goal vistool visualize optimization tracing generally aid teaching optimization-related concepts.","code":""},{"path":"https://slds-lmu.github.io/vistool/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Visualize optimization methods","text":"can install development version vistool GitHub : Please note visualization features rely plotly turns relies certain functionality provided Python packages, accessed via reticulate. importantly affects $save() functionality plots, uses plotly::save_image() internally, requires kaleido Python package. following instructions provided ?plotly::save_image assume miniconda installed already:","code":"# install.packages(\"pak\") pak::pak(\"slds-lmu/vistool\") install.packages('reticulate') reticulate::install_miniconda() reticulate::conda_install('r-reticulate', 'python-kaleido') reticulate::conda_install('r-reticulate', 'plotly', channel = 'plotly') reticulate::use_miniconda('r-reticulate')"},{"path":"https://slds-lmu.github.io/vistool/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Visualize optimization methods","text":"examples shows visualize prediction surface SVM pima task included mlr3: View interactively:  Save static version png:","code":"library(vistool) library(mlr3verse) #> Loading required package: mlr3 # Create an example task, add missing data imputation and select 2 features task = tsk(\"pima\") task = po(\"imputemean\")$train(list(task))[[1]] task$select(c(\"insulin\", \"mass\"))  # Select example learner learner = lrn(\"classif.svm\", predict_type = \"prob\")  # Create the Visualizer object from task and learner vis = as_visualizer(task, learner)  # Define a 3D scene vis$set_scene(x = 1.4, y = 1.4, z = 1.4) vis$plot() vis$save(\"man/figures/demo_1.png\", width = 500, height = 500)"},{"path":"https://slds-lmu.github.io/vistool/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Visualize optimization methods","text":"visualization … Loss Functions Model Predictions Objective Functions","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Loss Function — LossFunction","title":"Loss Function — LossFunction","text":"class used create loss functions.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Loss Function — LossFunction","text":"id `character(1)` Unique identifier loss function. fun `function(y_true, y_pred, ...)` Loss function. label `character(1)` Label loss function. properties `character()` Additional properties loss function.","code":""},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Loss Function — LossFunction","text":"LossFunction$new() LossFunction$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Loss Function — LossFunction","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Function — LossFunction","text":"","code":"LossFunction$new(id, label, properties, fun)"},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Function — LossFunction","text":"id (`character(1)`) Unique identifier loss function. label (`character(1)`) Label loss function. properties (`character()`) Additional properties loss function. fun (`function(y_true, y_pred, ...)`) Loss function.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Loss Function — LossFunction","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Loss Function — LossFunction","text":"","code":"LossFunction$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/LossFunction.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Loss Function — LossFunction","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Objective function — Objective","title":"Objective function — Objective","text":"class defines objective used optimization.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Objective function — Objective","text":"id (`character(1)` id objective. label (`character(1)` label objective, .e. . limits_lower (`numeric()`) lower limits dimension. limits_upper (`numeric()`) upper limits dimension. minimize (`logical(1)`) problem minimization problem?","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Objective function — Objective","text":"archive (`data.table()`) Archive calls `$evalStore`. log_funs (`list()`) list containing logging functions. function must argument. xdim (`integer(1)`) Input dimension `f`.","code":""},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Objective function — Objective","text":"Objective$new() Objective$eval() Objective$evalStore() Objective$assertX() Objective$grad() Objective$hess() Objective$addLogFun() Objective$clearArchive() Objective$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Objective function — Objective","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$new(   id,   fun,   label = \"f\",   xdim,   limits_lower = NA,   limits_upper = NA,   xtest = NULL,   minimize = FALSE,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"id (`character(1)` id objective. fun (`function` objective function. first argument must numerical input length `xdim`. label (`character(1)` label objective, .e. . xdim (`integer(1)`) input dimension `fun`. Use `xdim = NA` arbitrary input dimension. limits_lower (`numeric(xdim)`) lower boundaries inputs `fun`. Must limits_upper (`numeric(xdim)`) upper boundaries inputs `fun`. Must length `xdim`. xtest (`numeric()`) Test value `fun` initialization. defined, `xtest = rep(0, ifelse(.na(xdim), 2, xdim))` used. minimize (`logical(1)`) problem minimization problem? Default (`FALSE`). ... Additional arguments passed `fun`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-eval-","dir":"Reference","previous_headings":"","what":"Method eval()","title":"Objective function — Objective","text":"Evaluate objective function.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$eval(x)"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"x (`numeric`) numerical input `fun`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective function — Objective","text":"result `fun(x)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-evalstore-","dir":"Reference","previous_headings":"","what":"Method evalStore()","title":"Objective function — Objective","text":"Evaluate objective function log archive. call logs input vector `x`, result fun `fval`, gradient `grad`, norm gradient `gnorm`, additional logs added `$addLogFun`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$evalStore(x)"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"x (`numeric`) numerical input `fun`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"Objective function — Objective","text":"Invisible list logs added archive.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-assertx-","dir":"Reference","previous_headings":"","what":"Method assertX()","title":"Objective function — Objective","text":"Assert numeric input suitable .","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$assertX(x, ...)"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"x (`numeric()`) Input value `fun`. ... Additional arguments passed `checkmate::assertNumeric(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-grad-","dir":"Reference","previous_headings":"","what":"Method grad()","title":"Objective function — Objective","text":"Evaluate gradient objective function x.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$grad(x)"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"x (`numeric`) numerical input `fun`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-hess-","dir":"Reference","previous_headings":"","what":"Method hess()","title":"Objective function — Objective","text":"Evaluate hessian objective function x.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$hess(x)"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"x (`numeric`) numerical input `fun`. ... Additional arguments passed `fun`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-addlogfun-","dir":"Reference","previous_headings":"","what":"Method addLogFun()","title":"Objective function — Objective","text":"Method add custom logger objective.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$addLogFun(l, label)"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"l (`function`) Function returns single numerical value string. arguments `l` must `x`, `fval` `grad`. label (`character(1)`) name logger. ... Additional arguments passed `fun`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-cleararchive-","dir":"Reference","previous_headings":"","what":"Method clearArchive()","title":"Objective function — Objective","text":"Delete archive.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$clearArchive()"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Objective function — Objective","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"Objective function — Objective","text":"","code":"Objective$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Objective.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"Objective function — Objective","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimizer class — Optimizer","title":"Optimizer class — Optimizer","text":"class defines optimization technique.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Optimizer class — Optimizer","text":"id (`character(1)` id objective. print_trace (`logical(1)` Indicator whether print status `$optimize()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Optimizer class — Optimizer","text":"lr (`numeric(1`) Step size algorithm. archive (`data.table()`) Archive calls `$evalStore`. objective (`Objective`) objective function. x (`numeric()`) numerical input vector used starting point `$optimize()`.","code":""},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Optimizer class — Optimizer","text":"Optimizer$new() Optimizer$prepareUpdateForArchive() Optimizer$updateArchive() Optimizer$setX() Optimizer$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Optimizer class — Optimizer","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer class — Optimizer","text":"","code":"Optimizer$new(objective, x_start, id = NULL, print_trace = TRUE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer class — Optimizer","text":"objective (`Objective`) objective optimize. x_start (`numeric()`) Start value optimization. Note, first call `$optimize()` last value used continue optimization. Get value `$x`. id (`character(1)`) Id object. print_trace (`logical(1)`) Indicator whether print status `$optimize()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"method-prepareupdateforarchive-","dir":"Reference","previous_headings":"","what":"Method prepareUpdateForArchive()","title":"Optimizer class — Optimizer","text":"Prepare updates adding archive.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer class — Optimizer","text":"","code":"Optimizer$prepareUpdateForArchive(   x_out,   x_in,   update,   fval_out,   fval_in,   lr,   step_size,   objective,   step,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer class — Optimizer","text":"x_out (`numeric()`) new proposed point optimizer. x_in (`numeric()`) old input value updated `x_out`. update (`numeric()`) update `x_in` `x_out`. fval_out (`numeric(1)`) objective value `objetive$eval(x_out)`. fval_in (`numeric(1)`) objective value `objetive$eval(x_in)`. lr (`numeric(1)`) learning rate used multiply `update` . step_size (`numeric(1)`) step_size used multiply `lr * update` . objective (`Objective`) objective used `$optimize()`. step (`integer(1)`) step iteration. ... Additional objects added archive (e.g. `momentum`).","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"Optimizer class — Optimizer","text":"`data.table()` input arguments.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"method-updatearchive-","dir":"Reference","previous_headings":"","what":"Method updateArchive()","title":"Optimizer class — Optimizer","text":"Add points archive.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer class — Optimizer","text":"","code":"Optimizer$updateArchive(ain)"},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer class — Optimizer","text":"ain `data.table()` names \"x_out\", \"x_in\", \"update\", \"fval_out\", \"fval_in\", \"lr\", \"objective\", \"step\".","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"method-setx-","dir":"Reference","previous_headings":"","what":"Method setX()","title":"Optimizer class — Optimizer","text":"Set current input vector used start point `$optimize()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer class — Optimizer","text":"","code":"Optimizer$setX(x)"},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer class — Optimizer","text":"x (`numeric()`) Input vector.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Optimizer class — Optimizer","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimizer class — Optimizer","text":"","code":"Optimizer$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Optimizer.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimizer class — Optimizer","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":null,"dir":"Reference","previous_headings":"","what":"Gradient descent optimizer — OptimizerGD","title":"Gradient descent optimizer — OptimizerGD","text":"class defines gradient descent","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"Gradient descent optimizer — OptimizerGD","text":"vistool::Optimizer -> vistool::OptimizerMomentum -> OptimizerGD","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Gradient descent optimizer — OptimizerGD","text":"momentum (`numeric(1)`) Momentum algorithm.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Gradient descent optimizer — OptimizerGD","text":"vistool::Optimizer$prepareUpdateForArchive() vistool::Optimizer$setX() vistool::Optimizer$updateArchive() vistool::OptimizerMomentum$optimize() vistool::OptimizerMomentum$update()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Gradient descent optimizer — OptimizerGD","text":"OptimizerGD$new() OptimizerGD$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Gradient descent optimizer — OptimizerGD","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient descent optimizer — OptimizerGD","text":"","code":"OptimizerGD$new(   objective,   x_start,   lr = 0.01,   id = \"Gradient Descent\",   print_trace = TRUE )"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient descent optimizer — OptimizerGD","text":"objective (`Objective`) objective optimize. x_start (`numeric()`) Start value optimization. Note, first call `$optimize()` last value used continue optimization. Get value `$x`. lr (`numeric(1)`) Step size update multiplied. id (`character(1)`) Id object. print_trace (`logical(1)`) Indicator whether print status `$optimize()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Gradient descent optimizer — OptimizerGD","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Gradient descent optimizer — OptimizerGD","text":"","code":"OptimizerGD$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerGD.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gradient descent optimizer — OptimizerGD","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":null,"dir":"Reference","previous_headings":"","what":"Momentum optimizer — OptimizerMomentum","title":"Momentum optimizer — OptimizerMomentum","text":"class defines momentum.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Momentum optimizer — OptimizerMomentum","text":"vistool::Optimizer -> OptimizerMomentum","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Momentum optimizer — OptimizerMomentum","text":"momentum (`numeric(1)`) Momentum algorithm.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Momentum optimizer — OptimizerMomentum","text":"vistool::Optimizer$prepareUpdateForArchive() vistool::Optimizer$setX() vistool::Optimizer$updateArchive()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Momentum optimizer — OptimizerMomentum","text":"OptimizerMomentum$new() OptimizerMomentum$optimize() OptimizerMomentum$update() OptimizerMomentum$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Momentum optimizer — OptimizerMomentum","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum optimizer — OptimizerMomentum","text":"","code":"OptimizerMomentum$new(   objective,   x_start,   lr = 0.01,   momentum = 0.9,   id = \"Momentum\",   print_trace = TRUE )"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum optimizer — OptimizerMomentum","text":"objective (`Objective`) objective optimize. x_start (`numeric()`) Start value optimization. Note, first call `$optimize()` last value used continue optimization. Get value `$x`. lr (`numeric(1)`) Step size update multiplied. momentum (`numeric(1)`) Momentum value. id (`character(1)`) Id object. print_trace (`logical(1)`) Indicator whether print status `$optimize()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Momentum optimizer — OptimizerMomentum","text":"Optimize `steps` iteration.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum optimizer — OptimizerMomentum","text":"","code":"OptimizerMomentum$optimize(   steps = 1L,   stepSizeControl = function(x, u, obj, opt) return(1),   minimize = NULL )"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum optimizer — OptimizerMomentum","text":"steps (`integer(1)`) Number steps/iterations. stepSizeControl (`function()`) function arguments `x` (old input value), `u` (upate generated `$update()`), `obj` (objective object), `opt` optimizer `self`. Default simply returns 1 include update . Note update `u` calculated based formula learning rate, e.g., GD x_new = x_old + lr * g, update u = lr * g. Step size control takes x_old u (included learning rate) calculates value used extend compress u final update. minimize (`logical(1)`) Indicator whether minimize optimize objective. default (`NULL`) uses option defined `objective$minimize`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Momentum optimizer — OptimizerMomentum","text":"Calculate update `x`","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum optimizer — OptimizerMomentum","text":"","code":"OptimizerMomentum$update(lr, mom)"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum optimizer — OptimizerMomentum","text":"lr (`numeric(1)`) learning rate. mom (`numeric(1)`) momentum.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Momentum optimizer — OptimizerMomentum","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Momentum optimizer — OptimizerMomentum","text":"","code":"OptimizerMomentum$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerMomentum.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Momentum optimizer — OptimizerMomentum","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":null,"dir":"Reference","previous_headings":"","what":"Nesterovs momentum optimizer — OptimizerNAG","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"class defines Nesterovs momentum using Nesterov accelerated gradient (NAG).","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"vistool::Optimizer -> OptimizerNAG","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"momentum (`numeric(1)`) Momentum algorithm.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"vistool::Optimizer$prepareUpdateForArchive() vistool::Optimizer$setX() vistool::Optimizer$updateArchive()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"OptimizerNAG$new() OptimizerNAG$optimize() OptimizerNAG$update() OptimizerNAG$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"","code":"OptimizerNAG$new(   objective,   x_start,   lr = 0.01,   momentum = 0.9,   id = \"NAG\",   print_trace = TRUE )"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"objective (`Objective`) objective optimize. x_start (`numeric()`) Start value optimization. Note, first call `$optimize()` last value used continue optimization. Get value `$x`. lr (`numeric(1)`) Step size update multiplied. momentum (`numeric(1)`) Momentum value. id (`character(1)`) Id object. print_trace (`logical(1)`) Indicator whether print status `$optimize()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"method-optimize-","dir":"Reference","previous_headings":"","what":"Method optimize()","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"Optimize `steps` iteration.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"","code":"OptimizerNAG$optimize(   steps = 1L,   stepSizeControl = function(x, u, obj, opt) return(1),   minimize = NULL )"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"steps (`integer(1)`) Number steps/iterations. stepSizeControl (`function()`) function arguments `x` (old input value), `u` (upate generated `$update()`), `obj` (objective object). minimize (`logical(1)`) Indicator whether minimize optimize objective. default (`NULL`) uses option defined `objective$minimize`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"method-update-","dir":"Reference","previous_headings":"","what":"Method update()","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"Calculate update `x`","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"","code":"OptimizerNAG$update(lr, mom, minimize)"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"lr (`numeric(1)`) learning rate. mom (`numeric(1)`) momentum. minimize (`logical(1)`) Indicator whether minimize optimize objective (default = `TRUE`).","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"","code":"OptimizerNAG$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/OptimizerNAG.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nesterovs momentum optimizer — OptimizerNAG","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Base Class — Visualizer1D","title":"Visualize Base Class — Visualizer1D","text":"class used create 1D visualizations.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Visualize Base Class — Visualizer1D","text":"x (`vector()`) x-values. y (`vector()`) y-values plot_lab (character(1) Label plot. x_lab (character(1) Label x axis. y_lab (character(1) Label y axis.","code":""},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Visualize Base Class — Visualizer1D","text":"Visualizer1D$new() Visualizer1D$init_layer_lines() Visualizer1D$setLayout() Visualizer1D$plot() Visualizer1D$save() Visualizer1D$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Visualize Base Class — Visualizer1D","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer1D","text":"","code":"Visualizer1D$new(x, y, plot_lab = NULL, x_lab = \"x\", y_lab = \"y\")"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer1D","text":"x (`numeric()`) x-values. y (`numeric()`) y-values. plot_lab (character(1) Label plot. x_lab (character(1) Label x axis. y_lab (character(1) Label y axis.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"method-init-layer-lines-","dir":"Reference","previous_headings":"","what":"Method init_layer_lines()","title":"Visualize Base Class — Visualizer1D","text":"Initialize plot line plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer1D","text":"","code":"Visualizer1D$init_layer_lines(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer1D","text":"... (``) arguments passed `add_trace(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"method-setlayout-","dir":"Reference","previous_headings":"","what":"Method setLayout()","title":"Visualize Base Class — Visualizer1D","text":"Set layout plotly plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer1D","text":"","code":"Visualizer1D$setLayout(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer1D","text":"... (``) Layout options directly passed `layout(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Visualize Base Class — Visualizer1D","text":"Return plot hence plot processing.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer1D","text":"","code":"Visualizer1D$plot()"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"method-save-","dir":"Reference","previous_headings":"","what":"Method save()","title":"Visualize Base Class — Visualizer1D","text":"Save plot using plotlys `orca()` function.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer1D","text":"","code":"Visualizer1D$save(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer1D","text":"... (``) arguments passed `orca()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Visualize Base Class — Visualizer1D","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer1D","text":"","code":"Visualizer1D$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1D.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer1D","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Model — Visualizer1DModel","title":"Visualize Model — Visualizer1DModel","text":"class used create visualizations tasks learners.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Visualize Model — Visualizer1DModel","text":"vistool::Visualizer1D -> Visualizer1DModel","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Visualize Model — Visualizer1DModel","text":"task (`mlr3::Task`) Task used train model. learner (`mlr3::Learner`) Learner used train model.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Visualize Model — Visualizer1DModel","text":"vistool::Visualizer1D$init_layer_lines() vistool::Visualizer1D$plot() vistool::Visualizer1D$save() vistool::Visualizer1D$setLayout()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Visualize Model — Visualizer1DModel","text":"Visualizer1DModel$new() Visualizer1DModel$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Visualize Model — Visualizer1DModel","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Model — Visualizer1DModel","text":"","code":"Visualizer1DModel$new(   task,   learner,   x1_limits = NULL,   padding = 0,   n_points = 100L )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Model — Visualizer1DModel","text":"task ([mlr3::Task]) task train model . learner ([mlr3::Learner]) learner train model . x1_limits (`numeric(2)`) x1 limits. padding (`numeric(1)`) margin added x1limits x2limits. x1 margin calculated `max(x1lmits) - min(x1limits) * padding`. n_points (`integer(1)`) number generated point per dimension. Note grid `npoints^2` values generated evaluated `objective$eval(x)` plot surface.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Visualize Model — Visualizer1DModel","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Model — Visualizer1DModel","text":"","code":"Visualizer1DModel$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Model — Visualizer1DModel","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Objective — Visualizer1DObjective","title":"Visualize Objective — Visualizer1DObjective","text":"class used create visualizations optimization traces.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Visualize Objective — Visualizer1DObjective","text":"vistool::Visualizer1D -> Visualizer1DObjective","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Visualize Objective — Visualizer1DObjective","text":"objective (`Objective`) objective optimized. object used generate surface/contour lines.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Visualize Objective — Visualizer1DObjective","text":"vistool::Visualizer1D$init_layer_lines() vistool::Visualizer1D$plot() vistool::Visualizer1D$save() vistool::Visualizer1D$setLayout()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Visualize Objective — Visualizer1DObjective","text":"Visualizer1DObjective$new() Visualizer1DObjective$add_optimization_trace() Visualizer1DObjective$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Visualize Objective — Visualizer1DObjective","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer1DObjective","text":"","code":"Visualizer1DObjective$new(   objective,   x1_limits = NULL,   padding = 0,   n_points = 100L )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer1DObjective","text":"objective (`Objective`) objective optimized. object used generate surface/contour lines. x1_limits (`numeric(2)`) x1 limits. padding (`numeric(1)`) margin added x1limits x2limits. x1 margin calculated `max(x1lmits) - min(x1limits) * padding`. n_points (`integer(1)`) number generated point per dimension. Note grid `npoints^2` values generated evaluated `objective$eval(x)` plot surface.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"method-add-optimization-trace-","dir":"Reference","previous_headings":"","what":"Method add_optimization_trace()","title":"Visualize Objective — Visualizer1DObjective","text":"Add optimization trace plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer1DObjective","text":"","code":"Visualizer1DObjective$add_optimization_trace(optimizer)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer1DObjective","text":"optimizer (`Optimizer`) optimizer add plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Visualize Objective — Visualizer1DObjective","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer1DObjective","text":"","code":"Visualizer1DObjective$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer1DObjective.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer1DObjective","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Base Class — Visualizer2D","title":"Visualize Base Class — Visualizer2D","text":"class used create 2D visualizations.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Visualize Base Class — Visualizer2D","text":"grid (`list()`) List `x1` `x2` grid. zmat (`matrix()`) result evaluation element cross product `grid$x1` `grid$x2`. plot_lab (character(1) Label plot. x1_lab (character(1) Label x1 axis. x2_lab (character(1) Label x2 axis. z_lab (character(1) Label z axis.","code":""},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Visualize Base Class — Visualizer2D","text":"Visualizer2D$new() Visualizer2D$init_layer_contour() Visualizer2D$init_layer_surface() Visualizer2D$set_layout() Visualizer2D$set_scene() Visualizer2D$plot() Visualizer2D$save() Visualizer2D$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Visualize Base Class — Visualizer2D","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$new(   grid,   zmat,   plot_lab = NULL,   x1_lab = \"x1\",   x2_lab = \"x2\",   z_lab = \"z\" )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer2D","text":"grid (`list()`) List `x1` `x2` grid. zmat (`matrix()`) result evaluation element cross product `grid$x1` `grid$x2`. plot_lab (`character(1)`) Label plot. x1_lab (`character(1)`) Label x1 axis. x2_lab (`character(1)`) Label x2 axis. z_lab (`character(1)`) Label z axis.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-init-layer-contour-","dir":"Reference","previous_headings":"","what":"Method init_layer_contour()","title":"Visualize Base Class — Visualizer2D","text":"Initialize plot contour lines.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$init_layer_contour(   opacity = 0.8,   colorscale = list(c(0, 1), c(\"rgb(176,196,222)\", \"rgb(160,82,45)\")),   show_title = TRUE,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer2D","text":"opacity (`numeric(1)`) Opacity layer. colorscale (`list()`) coloring contour. show_title (`logical(1)`) Indicator whether show title plot. ... (``) arguments passed `add_trace(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-init-layer-surface-","dir":"Reference","previous_headings":"","what":"Method init_layer_surface()","title":"Visualize Base Class — Visualizer2D","text":"Initialize plot 3D surface.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$init_layer_surface(   opacity = 0.8,   colorscale = list(c(0, 1), c(\"rgb(176,196,222)\", \"rgb(160,82,45)\")),   show_contours = FALSE,   show_title = TRUE,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer2D","text":"opacity (`numeric(1)`) Opacity layer. colorscale (`list()`) coloring surface. show_contours (`logical(1)`) Indicator whether show contours surface. show_title (`logical(1)`) Indicator whether show title plot. ... (``) arguments passed `add_trace(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-set-layout-","dir":"Reference","previous_headings":"","what":"Method set_layout()","title":"Visualize Base Class — Visualizer2D","text":"Set layout plotly plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$set_layout(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer2D","text":"... Layout options directly passed `layout(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-set-scene-","dir":"Reference","previous_headings":"","what":"Method set_scene()","title":"Visualize Base Class — Visualizer2D","text":"Set view 3D plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$set_scene(x, y, z)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer2D","text":"x (`numeric(1)`) view \"camera looks \" plot. y (`numeric(1)`) view \"camera looks \" plot. z (`numeric(1)`) view \"camera looks \" plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Visualize Base Class — Visualizer2D","text":"Return plot hence plot processing.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$plot()"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-save-","dir":"Reference","previous_headings":"","what":"Method save()","title":"Visualize Base Class — Visualizer2D","text":"Save plot using plotlys `save_image()` function.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$save(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer2D","text":"... arguments passed `save_image()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Visualize Base Class — Visualizer2D","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Base Class — Visualizer2D","text":"","code":"Visualizer2D$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2D.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Base Class — Visualizer2D","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Model — Visualizer2DModel","title":"Visualize Model — Visualizer2DModel","text":"class used create 2D visualizations learners tasks.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Visualize Model — Visualizer2DModel","text":"vistool::Visualizer2D -> Visualizer2DModel","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Visualize Model — Visualizer2DModel","text":"task (`mlr3::Task`) Task used train model. learner (`mlr3::Learner`) Learner used train model.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Visualize Model — Visualizer2DModel","text":"vistool::Visualizer2D$init_layer_contour() vistool::Visualizer2D$init_layer_surface() vistool::Visualizer2D$plot() vistool::Visualizer2D$save() vistool::Visualizer2D$set_layout() vistool::Visualizer2D$set_scene()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Visualize Model — Visualizer2DModel","text":"Visualizer2DModel$new() Visualizer2DModel$add_training_data() Visualizer2DModel$add_decision_boundary() Visualizer2DModel$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Visualize Model — Visualizer2DModel","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Model — Visualizer2DModel","text":"","code":"Visualizer2DModel$new(   task,   learner,   x1_limits = NULL,   x2_limits = NULL,   padding = 0,   n_points = 100L )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Model — Visualizer2DModel","text":"task ([mlr3::Task]) task train model . learner ([mlr3::Learner]) learner train model . x1_limits (`numeric(2)`) x1 limits. x2_limits (`numeric(2)`) x2 limits. padding (`numeric(1)`) margin added x1limits x2limits. x1 margin calculated `max(x1lmits) - min(x1limits) * padding`. n_points (`integer(1)`) number generated point per dimension. Note grid `npoints^2` values generated evaluated `objective$eval(x)` plot surface.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"method-add-training-data-","dir":"Reference","previous_headings":"","what":"Method add_training_data()","title":"Visualize Model — Visualizer2DModel","text":"Adds training data plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Model — Visualizer2DModel","text":"","code":"Visualizer2DModel$add_training_data(size = 5, color = \"grey\", ...)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Model — Visualizer2DModel","text":"size (`numeric(1)`) Size points. color (`character(1)`) Color points. ... (``) arguments passed `add_trace(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"method-add-decision-boundary-","dir":"Reference","previous_headings":"","what":"Method add_decision_boundary()","title":"Visualize Model — Visualizer2DModel","text":"Adds decision boundary plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Model — Visualizer2DModel","text":"","code":"Visualizer2DModel$add_decision_boundary(   threshold = 0.5,   surfacecolor = list(c(0, 1), c(\"rgb(176,196,222)\", \"rgb(160,82,45)\")),   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Model — Visualizer2DModel","text":"threshold (`numeric(1)`) Threshold decision boundary. surfacecolor (`list()`) coloring surface. ... (``) arguments passed `add_trace(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Visualize Model — Visualizer2DModel","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Model — Visualizer2DModel","text":"","code":"Visualizer2DModel$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Model — Visualizer2DModel","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Objective — Visualizer2DObjective","title":"Visualize Objective — Visualizer2DObjective","text":"class used create visualizations animations optimization traces.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"Visualize Objective — Visualizer2DObjective","text":"vistool::Visualizer2D -> Visualizer2DObjective","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Visualize Objective — Visualizer2DObjective","text":"objective (`Objective`) objective optimized. object used generate surface/contour lines.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"Visualize Objective — Visualizer2DObjective","text":"vistool::Visualizer2D$init_layer_contour() vistool::Visualizer2D$init_layer_surface() vistool::Visualizer2D$plot() vistool::Visualizer2D$save() vistool::Visualizer2D$set_layout() vistool::Visualizer2D$set_scene()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Visualize Objective — Visualizer2DObjective","text":"Visualizer2DObjective$new() Visualizer2DObjective$add_optimization_trace() Visualizer2DObjective$add_layer_taylor() Visualizer2DObjective$add_layer_hessian() Visualizer2DObjective$animate() Visualizer2DObjective$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Visualize Objective — Visualizer2DObjective","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer2DObjective","text":"","code":"Visualizer2DObjective$new(   objective,   x1_limits = NULL,   x2_limits = NULL,   padding = 0,   n_points = 100L )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer2DObjective","text":"objective (`Objective`) objective optimized. object used generate surface/contour lines. x1_limits (`numeric(2)`) x1 limits. x2_limits (`numeric(2)`) x2 limits. padding (`numeric(1)`) margin added x1limits x2limits. x1 margin calculated `max(x1lmits) - min(x1limits) * padding`. n_points (`integer(1)`) number generated point per dimension. Note grid `npoints^2` values generated evaluated `objective$eval(x)` plot surface.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"method-add-optimization-trace-","dir":"Reference","previous_headings":"","what":"Method add_optimization_trace()","title":"Visualize Objective — Visualizer2DObjective","text":"Add optimization trace.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer2DObjective","text":"","code":"Visualizer2DObjective$add_optimization_trace(   opt,   line_color = colSampler(),   mcolor_out = \"black\",   npoints = NULL,   npmax = NULL,   name = NULL,   offset = NULL,   add_marker_at = 1,   marker_shape = \"circle\",   marker_color = NULL,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer2DObjective","text":"opt (`Optimizer`) optimizer archive extracted used plot trace. line_color (`character(1)`) color trace. mcolor_out (`character(1)`) outer line color marker. npoints (`integer(1)`) number used points archive. Default `NULL` means points used. set, sequence 1 `nrow(opt$archive)` created. npmax (`integer(1)`) number points used sequence `seq_len(nrow(opt$archive))[seq_len(npmax)]` name (`character(1)`) name trace legend. Default `NULL` means name pasted `opt$id` `objective$id`. offset (`numeric(3)`) Trace shift direction (x, y, z). add_marker_at (`integer()`) Vector iterations marker added. marker_shape (`character()`) Vector indicating shape markers. `length(marker_shape) == 1`, markers get shape. option specify markers individually passing vector `length(add_marker_at)`. list shapes see `schema(F)$traces$XXX$attributes$marker$symbol$values` `XXX` one `scatter` `scatter3d`. `marker_shape = NA`, marker added. marker_color (`character()`) colors markers. ... arguments passed `add_trace(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"method-add-layer-taylor-","dir":"Reference","previous_headings":"","what":"Method add_layer_taylor()","title":"Visualize Objective — Visualizer2DObjective","text":"Add Taylor approximation (1 2 degrees).","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer2DObjective","text":"","code":"Visualizer2DObjective$add_layer_taylor(   x0,   degree = 2,   x1margin = 0,   x2margin = 0,   npoints_per_dim = 20L,   zlim = NULL,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer2DObjective","text":"x0 (`numeric()) ` point around approximation done. degree (`integer(1)`) degree approximation (1 2 implemented). x1margin (`numeric(1)`) \"length\" hyperplane direction x1. x2margin (`numeric(1)`) \"length\" hyperplane direction x2. npoints_per_dim (`integer(1)`) Number points per dimension plotting grid. zlim (`numeric(2)`) limits z. Can helpful hyperplane huge z range therefore plot looks ugly. ... (``) Additional parameter passed `add_surface()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"method-add-layer-hessian-","dir":"Reference","previous_headings":"","what":"Method add_layer_hessian()","title":"Visualize Objective — Visualizer2DObjective","text":"Add two \"arrows\" eigenvectors Hessian.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer2DObjective","text":"","code":"Visualizer2DObjective$add_layer_hessian(   x0,   x1length = 0.1,   x2length = 0.1,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer2DObjective","text":"x0 (`numeric(2)`) point Hessian calculated. x1length (`numeric(1)`) length first eigenvector. x2length (`numeric(1)`) length second eigenvector. ... (``) Additional arguments passed `add_trace`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"method-animate-","dir":"Reference","previous_headings":"","what":"Method animate()","title":"Visualize Objective — Visualizer2DObjective","text":"Create animation `$plot()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer2DObjective","text":"","code":"Visualizer2DObjective$animate(   dir = \"animation\",   nframes = 10L,   view_start = list(x = 1, y = 1, z = 1),   view_end = list(x = 1, y = 1, z = 1),   fext = \"png\",   stops = NULL,   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer2DObjective","text":"dir (`character(1)`) directory images saved. nframes (`integer(1)`) number frames. view_start (`list()`) start view animation. view_end (`list()`) end view animation. fext (`character(1)`) file extension (default `png`). stops (`integer()`) step / iteration archives optimizers added `$addLayerOptimizationTrace()` frame taken. Must exact length defined `nframes`. default, sequence equidistant points generated `stops`. ... (``) Additional arguments passed `$save(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Visualize Objective — Visualizer2DObjective","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Objective — Visualizer2DObjective","text":"","code":"Visualizer2DObjective$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/Visualizer2DObjective.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Objective — Visualizer2DObjective","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualize Loss Function — VisualizerLossFunction","title":"Visualize Loss Function — VisualizerLossFunction","text":"class used create visualizations loss functions.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"Visualize Loss Function — VisualizerLossFunction","text":"loss_function [LossFunction] Loss function. loss (`numeric()`) Loss values. y_pred `numeric()` Predicted values.","code":""},{"path":[]},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"Visualize Loss Function — VisualizerLossFunction","text":"VisualizerLossFunction$new() VisualizerLossFunction$init_layer_lines() VisualizerLossFunction$set_layout() VisualizerLossFunction$plot() VisualizerLossFunction$save() VisualizerLossFunction$clone()","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"Visualize Loss Function — VisualizerLossFunction","text":"Creates new instance [R6][R6::R6Class] class.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Loss Function — VisualizerLossFunction","text":"","code":"VisualizerLossFunction$new(loss_function, y_pred, y_true, ...)"},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Loss Function — VisualizerLossFunction","text":"loss_function [LossFunction] Loss function. y_pred (`numeric()`) Predicted values. y_true (`numeric(1)`) True value. ... (``) Additional arguments passed loss function.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"method-init-layer-lines-","dir":"Reference","previous_headings":"","what":"Method init_layer_lines()","title":"Visualize Loss Function — VisualizerLossFunction","text":"Initialize plot line plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Loss Function — VisualizerLossFunction","text":"","code":"VisualizerLossFunction$init_layer_lines(   width = 2,   color = \"rgb(160,82,45)\",   ... )"},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Loss Function — VisualizerLossFunction","text":"width (`integer(1)`) Width line. color (`character(1)`) Color line. ... (``) arguments passed `add_trace(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"method-set-layout-","dir":"Reference","previous_headings":"","what":"Method set_layout()","title":"Visualize Loss Function — VisualizerLossFunction","text":"Set layout plotly plot.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Loss Function — VisualizerLossFunction","text":"","code":"VisualizerLossFunction$set_layout(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Loss Function — VisualizerLossFunction","text":"... (``) Layout options directly passed `layout(...)`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"method-plot-","dir":"Reference","previous_headings":"","what":"Method plot()","title":"Visualize Loss Function — VisualizerLossFunction","text":"Return plot hence plot processing.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Loss Function — VisualizerLossFunction","text":"","code":"VisualizerLossFunction$plot()"},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"method-save-","dir":"Reference","previous_headings":"","what":"Method save()","title":"Visualize Loss Function — VisualizerLossFunction","text":"Save plot using plotlys `orca()` function.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Loss Function — VisualizerLossFunction","text":"","code":"VisualizerLossFunction$save(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Loss Function — VisualizerLossFunction","text":"... (``) arguments passed `orca()`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"Visualize Loss Function — VisualizerLossFunction","text":"objects class cloneable method.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualize Loss Function — VisualizerLossFunction","text":"","code":"VisualizerLossFunction$clone(deep = FALSE)"},{"path":"https://slds-lmu.github.io/vistool/reference/VisualizerLossFunction.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualize Loss Function — VisualizerLossFunction","text":"deep Whether make deep clone.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/as_visualizer.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert to visualizer — as_visualizer","title":"Convert to visualizer — as_visualizer","text":"function converts visualizer.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/as_visualizer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert to visualizer — as_visualizer","text":"","code":"as_visualizer(x, ...)  # S3 method for Task as_visualizer(   x,   learner,   x1_limits = NULL,   x2_limits = NULL,   padding = 0,   n_points = 100L,   ... )  # S3 method for Objective as_visualizer(   x,   x1_limits = NULL,   x2_limits = NULL,   padding = 0,   n_points = 100L,   ... )  # S3 method for LossFunction as_visualizer(x, y_pred, y_true, ...)"},{"path":"https://slds-lmu.github.io/vistool/reference/as_visualizer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert to visualizer — as_visualizer","text":"x (``) Object convert visualizer. ... (``) Additional arguments. learner (`mlr3::Learner`) learner train model . x1_limits (`numeric(2)`) x1 limits. x2_limits (`numeric(2)`) x2 limits. padding (`numeric(1)`) margin added x1limits x2limits. x1 margin calculated `max(x1lmits) - min(x1limits) * padding`. n_points (`integer(1)`) number generated point per dimension. Note grid `npoints^2` values generated evaluated `objective$eval(x)` plot surface. y_pred (`numeric()`) Predicted values. y_true (`numeric(1)`) True value.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/assertStepSizeControl.html","id":null,"dir":"Reference","previous_headings":"","what":"Assertion for the main signature of a `stepSizeControlXX` function. — assertStepSizeControl","title":"Assertion for the main signature of a `stepSizeControlXX` function. — assertStepSizeControl","text":"Assertion main signature `stepSizeControlXX` function.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/assertStepSizeControl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assertion for the main signature of a `stepSizeControlXX` function. — assertStepSizeControl","text":"","code":"assertStepSizeControl(x, u, obj, opt)"},{"path":"https://slds-lmu.github.io/vistool/reference/assertStepSizeControl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assertion for the main signature of a `stepSizeControlXX` function. — assertStepSizeControl","text":"x (`numeric()`) \"old\" point. u (`numeric()`) update added `x` without step size control. obj (`Objective`) usd objective object. opt (`Optimizer`) optimizer object function called.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/colSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"Randomly generate colors — colSampler","title":"Randomly generate colors — colSampler","text":"Helper function generate RGB colors.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/colSampler.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Randomly generate colors — colSampler","text":"","code":"colSampler(alpha = NULL)"},{"path":"https://slds-lmu.github.io/vistool/reference/colSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Randomly generate colors — colSampler","text":"alpha (`numeric(1)`) alpha value. `!.null` used prefix 'rgba' instead 'rgb'.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/colSampler.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Randomly generate colors — colSampler","text":"character length one containing RGB color.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/dict_loss.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary of Loss Functions — dict_loss","title":"Dictionary of Loss Functions — dict_loss","text":"Dictionary loss functions.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/dict_loss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary of Loss Functions — dict_loss","text":"","code":"dict_loss"},{"path":"https://slds-lmu.github.io/vistool/reference/dict_loss.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary of Loss Functions — dict_loss","text":"object class DictionaryLoss (inherits Dictionary, R6) length 13.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/dict_objective.html","id":null,"dir":"Reference","previous_headings":"","what":"Dictionary for test functions — dict_objective","title":"Dictionary for test functions — dict_objective","text":"Dictionary test functions","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/dict_objective.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dictionary for test functions — dict_objective","text":"","code":"dict_objective"},{"path":"https://slds-lmu.github.io/vistool/reference/dict_objective.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dictionary for test functions — dict_objective","text":"object class DictionaryObjective (inherits Dictionary, R6) length 13.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/dict_objective.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dictionary for test functions — dict_objective","text":"","code":"dict_objective$get(\"TF_branin\") #> <Objective> #>   Public: #>     addLogFun: function (l, label)  #>     archive: active binding #>     assertX: function (x, ...)  #>     clearArchive: function ()  #>     clone: function (deep = FALSE)  #>     eval: function (x)  #>     evalStore: function (x)  #>     grad: function (x)  #>     hess: function (x)  #>     id: TF_branin #>     initialize: function (id, fun, label = \"f\", xdim, limits_lower = NA, limits_upper = NA,  #>     label: branin #>     limits_lower: -2 -2 #>     limits_upper: 3 3 #>     log_funs: active binding #>     minimize: FALSE #>     xdim: active binding #>   Private: #>     p_archive: data.table, data.frame #>     p_fargs: list #>     p_fun: function (x, scale_it = T, scale_low = c(-5, 0), scale_high = c(10,  #>     p_gradient: NULL #>     p_gradientFallback: function (x, ...)  #>     p_hessian: NULL #>     p_hessianFallback: function (x, ...)  #>     p_log_funs: list #>     p_xdim: 2 #>     p_xtest: 0 0"},{"path":"https://slds-lmu.github.io/vistool/reference/lss.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Loss Function — lss","title":"Retrieve Loss Function — lss","text":"Retrieve loss function dictionary.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/lss.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Loss Function — lss","text":"","code":"lss(.key, ...)"},{"path":"https://slds-lmu.github.io/vistool/reference/lss.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Loss Function — lss","text":".key (`character(1)`) Key passed respective [dictionary][mlr3misc::Dictionary] retrieve object. ... (named `list()`) Named arguments passed constructor, set public field. See [mlr3misc::dictionary_sugar_get()] details.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/mergeOptimArchives.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge optimization archives — mergeOptimArchives","title":"Merge optimization archives — mergeOptimArchives","text":"Merge archives.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/mergeOptimArchives.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge optimization archives — mergeOptimArchives","text":"","code":"mergeOptimArchives(...)"},{"path":"https://slds-lmu.github.io/vistool/reference/mergeOptimArchives.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge optimization archives — mergeOptimArchives","text":"... (``) Optimization objects.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/obj.html","id":null,"dir":"Reference","previous_headings":"","what":"Retrieve Objective Functions — obj","title":"Retrieve Objective Functions — obj","text":"Retrieve objective function dictionary.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/obj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Retrieve Objective Functions — obj","text":"","code":"obj(.key, ...)"},{"path":"https://slds-lmu.github.io/vistool/reference/obj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Retrieve Objective Functions — obj","text":".key (`character(1)`) Key passed respective [dictionary][mlr3misc::Dictionary] retrieve object. ... (named `list()`) Named arguments passed constructor, set public field. See [mlr3misc::dictionary_sugar_get()] details.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. data.table .data.table, data.table","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayExp.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct exponential decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayExp","title":"Conduct exponential decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayExp","text":"Conduct exponential decay adjust update. See https://neptune.ai/blog/--choose--learning-rate-scheduler","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayExp.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct exponential decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayExp","text":"","code":"stepSizeControlDecayExp(decay = 0.01)"},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayExp.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct exponential decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayExp","text":"decay (`numeric(1)`) decay parameter indicating fast step size reduced.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayExp.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct exponential decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayExp","text":"step size number.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayLinear.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct linear decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayLinear","title":"Conduct linear decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayLinear","text":"Conduct linear decay adjust update. See https://neptune.ai/blog/--choose--learning-rate-scheduler","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayLinear.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct linear decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayLinear","text":"","code":"stepSizeControlDecayLinear(iter_zero = 100L)"},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayLinear.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct linear decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayLinear","text":"iter_zero (`integer(1)`) iteration update shrinked zero.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayLinear.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct linear decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayLinear","text":"step size number.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecaySteps.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct a step-wise decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecaySteps","title":"Conduct a step-wise decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecaySteps","text":"Conduct step-wise decay adjust update. See https://neptune.ai/blog/--choose--learning-rate-scheduler","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecaySteps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct a step-wise decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecaySteps","text":"","code":"stepSizeControlDecaySteps(drop_rate = 0.1, every_iter = 10)"},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecaySteps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct a step-wise decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecaySteps","text":"drop_rate (`numeric(1)`) rate indicating much learning rate reduced `every_iter`. every_iter (`integer(1)`) Number indicates many iterations learning rate reduced `drop_rate`.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecaySteps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct a step-wise decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecaySteps","text":"step size number.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayTime.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct time decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayTime","title":"Conduct time decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayTime","text":"Conduct time decay adjust update. See https://neptune.ai/blog/--choose--learning-rate-scheduler","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayTime.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct time decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayTime","text":"","code":"stepSizeControlDecayTime(decay = 0.01)"},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayTime.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct time decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayTime","text":"decay (`numeric(1)`) decay parameter indicating fast step size reduced.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlDecayTime.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct time decay to adjust the update.\nSee https://neptune.ai/blog/how-to-choose-a-learning-rate-scheduler — stepSizeControlDecayTime","text":"step size number.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlLineSearch.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct line search in each iteration to adjust the update. — stepSizeControlLineSearch","title":"Conduct line search in each iteration to adjust the update. — stepSizeControlLineSearch","text":"Conduct line search iteration adjust update.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlLineSearch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct line search in each iteration to adjust the update. — stepSizeControlLineSearch","text":"","code":"stepSizeControlLineSearch(lower = 0, upper = 10)"},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlLineSearch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct line search in each iteration to adjust the update. — stepSizeControlLineSearch","text":"lower (`numeric(1)`) lower bound step_size. upper (`numeric(1)`) upper bound step_size.","code":""},{"path":"https://slds-lmu.github.io/vistool/reference/stepSizeControlLineSearch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct line search in each iteration to adjust the update. — stepSizeControlLineSearch","text":"step size number.","code":""},{"path":"https://slds-lmu.github.io/vistool/news/index.html","id":"vistool-010","dir":"Changelog","previous_headings":"","what":"vistool 0.1.0","title":"vistool 0.1.0","text":"Remove lim2002 optimizer ’s longer exported TestFunctions. Add GPL3 license line e.g. mlr3. Start versioning.","code":""}]
